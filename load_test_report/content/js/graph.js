/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 81.0, "minX": 0.0, "maxY": 2969.0, "series": [{"data": [[0.0, 81.0], [0.1, 180.0], [0.2, 200.0], [0.3, 246.0], [0.4, 257.0], [0.5, 269.0], [0.6, 290.0], [0.7, 294.0], [0.8, 312.0], [0.9, 316.0], [1.0, 322.0], [1.1, 326.0], [1.2, 333.0], [1.3, 337.0], [1.4, 344.0], [1.5, 353.0], [1.6, 363.0], [1.7, 374.0], [1.8, 380.0], [1.9, 386.0], [2.0, 390.0], [2.1, 394.0], [2.2, 396.0], [2.3, 398.0], [2.4, 399.0], [2.5, 401.0], [2.6, 404.0], [2.7, 409.0], [2.8, 412.0], [2.9, 414.0], [3.0, 423.0], [3.1, 430.0], [3.2, 439.0], [3.3, 454.0], [3.4, 458.0], [3.5, 461.0], [3.6, 463.0], [3.7, 465.0], [3.8, 467.0], [3.9, 469.0], [4.0, 471.0], [4.1, 472.0], [4.2, 475.0], [4.3, 477.0], [4.4, 479.0], [4.5, 481.0], [4.6, 483.0], [4.7, 484.0], [4.8, 486.0], [4.9, 487.0], [5.0, 489.0], [5.1, 491.0], [5.2, 493.0], [5.3, 495.0], [5.4, 496.0], [5.5, 497.0], [5.6, 498.0], [5.7, 499.0], [5.8, 503.0], [5.9, 504.0], [6.0, 507.0], [6.1, 509.0], [6.2, 510.0], [6.3, 511.0], [6.4, 513.0], [6.5, 514.0], [6.6, 517.0], [6.7, 519.0], [6.8, 520.0], [6.9, 522.0], [7.0, 524.0], [7.1, 525.0], [7.2, 526.0], [7.3, 527.0], [7.4, 528.0], [7.5, 530.0], [7.6, 531.0], [7.7, 532.0], [7.8, 533.0], [7.9, 534.0], [8.0, 535.0], [8.1, 537.0], [8.2, 539.0], [8.3, 540.0], [8.4, 541.0], [8.5, 543.0], [8.6, 543.0], [8.7, 545.0], [8.8, 546.0], [8.9, 547.0], [9.0, 548.0], [9.1, 549.0], [9.2, 549.0], [9.3, 550.0], [9.4, 550.0], [9.5, 551.0], [9.6, 552.0], [9.7, 553.0], [9.8, 555.0], [9.9, 556.0], [10.0, 557.0], [10.1, 558.0], [10.2, 558.0], [10.3, 560.0], [10.4, 560.0], [10.5, 561.0], [10.6, 563.0], [10.7, 564.0], [10.8, 565.0], [10.9, 566.0], [11.0, 567.0], [11.1, 568.0], [11.2, 570.0], [11.3, 571.0], [11.4, 571.0], [11.5, 572.0], [11.6, 573.0], [11.7, 574.0], [11.8, 575.0], [11.9, 576.0], [12.0, 577.0], [12.1, 578.0], [12.2, 579.0], [12.3, 580.0], [12.4, 581.0], [12.5, 582.0], [12.6, 583.0], [12.7, 584.0], [12.8, 584.0], [12.9, 585.0], [13.0, 586.0], [13.1, 587.0], [13.2, 588.0], [13.3, 589.0], [13.4, 589.0], [13.5, 590.0], [13.6, 591.0], [13.7, 592.0], [13.8, 593.0], [13.9, 594.0], [14.0, 594.0], [14.1, 595.0], [14.2, 596.0], [14.3, 597.0], [14.4, 598.0], [14.5, 598.0], [14.6, 599.0], [14.7, 600.0], [14.8, 601.0], [14.9, 601.0], [15.0, 602.0], [15.1, 603.0], [15.2, 604.0], [15.3, 604.0], [15.4, 605.0], [15.5, 605.0], [15.6, 606.0], [15.7, 607.0], [15.8, 608.0], [15.9, 608.0], [16.0, 609.0], [16.1, 610.0], [16.2, 610.0], [16.3, 611.0], [16.4, 612.0], [16.5, 612.0], [16.6, 613.0], [16.7, 614.0], [16.8, 614.0], [16.9, 616.0], [17.0, 617.0], [17.1, 617.0], [17.2, 618.0], [17.3, 619.0], [17.4, 619.0], [17.5, 620.0], [17.6, 620.0], [17.7, 621.0], [17.8, 621.0], [17.9, 621.0], [18.0, 622.0], [18.1, 623.0], [18.2, 623.0], [18.3, 624.0], [18.4, 625.0], [18.5, 625.0], [18.6, 626.0], [18.7, 627.0], [18.8, 627.0], [18.9, 628.0], [19.0, 629.0], [19.1, 630.0], [19.2, 631.0], [19.3, 631.0], [19.4, 632.0], [19.5, 633.0], [19.6, 634.0], [19.7, 634.0], [19.8, 635.0], [19.9, 636.0], [20.0, 636.0], [20.1, 638.0], [20.2, 638.0], [20.3, 639.0], [20.4, 640.0], [20.5, 641.0], [20.6, 641.0], [20.7, 642.0], [20.8, 643.0], [20.9, 643.0], [21.0, 644.0], [21.1, 645.0], [21.2, 645.0], [21.3, 646.0], [21.4, 647.0], [21.5, 648.0], [21.6, 649.0], [21.7, 650.0], [21.8, 650.0], [21.9, 651.0], [22.0, 652.0], [22.1, 653.0], [22.2, 653.0], [22.3, 654.0], [22.4, 655.0], [22.5, 655.0], [22.6, 656.0], [22.7, 657.0], [22.8, 658.0], [22.9, 659.0], [23.0, 660.0], [23.1, 660.0], [23.2, 661.0], [23.3, 662.0], [23.4, 663.0], [23.5, 664.0], [23.6, 665.0], [23.7, 665.0], [23.8, 666.0], [23.9, 667.0], [24.0, 667.0], [24.1, 668.0], [24.2, 669.0], [24.3, 669.0], [24.4, 670.0], [24.5, 670.0], [24.6, 670.0], [24.7, 671.0], [24.8, 671.0], [24.9, 672.0], [25.0, 672.0], [25.1, 673.0], [25.2, 673.0], [25.3, 673.0], [25.4, 674.0], [25.5, 675.0], [25.6, 675.0], [25.7, 676.0], [25.8, 676.0], [25.9, 676.0], [26.0, 677.0], [26.1, 678.0], [26.2, 678.0], [26.3, 679.0], [26.4, 680.0], [26.5, 680.0], [26.6, 681.0], [26.7, 682.0], [26.8, 683.0], [26.9, 684.0], [27.0, 685.0], [27.1, 686.0], [27.2, 687.0], [27.3, 688.0], [27.4, 689.0], [27.5, 690.0], [27.6, 691.0], [27.7, 692.0], [27.8, 693.0], [27.9, 693.0], [28.0, 695.0], [28.1, 696.0], [28.2, 697.0], [28.3, 697.0], [28.4, 698.0], [28.5, 699.0], [28.6, 700.0], [28.7, 702.0], [28.8, 703.0], [28.9, 704.0], [29.0, 705.0], [29.1, 707.0], [29.2, 707.0], [29.3, 708.0], [29.4, 710.0], [29.5, 711.0], [29.6, 712.0], [29.7, 713.0], [29.8, 714.0], [29.9, 715.0], [30.0, 716.0], [30.1, 717.0], [30.2, 718.0], [30.3, 720.0], [30.4, 722.0], [30.5, 723.0], [30.6, 724.0], [30.7, 725.0], [30.8, 726.0], [30.9, 726.0], [31.0, 727.0], [31.1, 728.0], [31.2, 729.0], [31.3, 730.0], [31.4, 730.0], [31.5, 731.0], [31.6, 733.0], [31.7, 733.0], [31.8, 734.0], [31.9, 735.0], [32.0, 736.0], [32.1, 737.0], [32.2, 737.0], [32.3, 738.0], [32.4, 739.0], [32.5, 739.0], [32.6, 740.0], [32.7, 741.0], [32.8, 742.0], [32.9, 743.0], [33.0, 743.0], [33.1, 744.0], [33.2, 745.0], [33.3, 745.0], [33.4, 746.0], [33.5, 747.0], [33.6, 747.0], [33.7, 748.0], [33.8, 749.0], [33.9, 750.0], [34.0, 751.0], [34.1, 752.0], [34.2, 753.0], [34.3, 754.0], [34.4, 754.0], [34.5, 755.0], [34.6, 756.0], [34.7, 757.0], [34.8, 758.0], [34.9, 759.0], [35.0, 761.0], [35.1, 761.0], [35.2, 762.0], [35.3, 764.0], [35.4, 765.0], [35.5, 766.0], [35.6, 767.0], [35.7, 768.0], [35.8, 769.0], [35.9, 770.0], [36.0, 771.0], [36.1, 772.0], [36.2, 772.0], [36.3, 773.0], [36.4, 774.0], [36.5, 775.0], [36.6, 776.0], [36.7, 777.0], [36.8, 778.0], [36.9, 780.0], [37.0, 781.0], [37.1, 782.0], [37.2, 783.0], [37.3, 783.0], [37.4, 784.0], [37.5, 786.0], [37.6, 787.0], [37.7, 787.0], [37.8, 788.0], [37.9, 789.0], [38.0, 789.0], [38.1, 790.0], [38.2, 791.0], [38.3, 792.0], [38.4, 793.0], [38.5, 794.0], [38.6, 795.0], [38.7, 796.0], [38.8, 797.0], [38.9, 798.0], [39.0, 799.0], [39.1, 801.0], [39.2, 802.0], [39.3, 802.0], [39.4, 803.0], [39.5, 803.0], [39.6, 804.0], [39.7, 805.0], [39.8, 806.0], [39.9, 806.0], [40.0, 807.0], [40.1, 808.0], [40.2, 809.0], [40.3, 809.0], [40.4, 810.0], [40.5, 812.0], [40.6, 812.0], [40.7, 813.0], [40.8, 814.0], [40.9, 815.0], [41.0, 816.0], [41.1, 816.0], [41.2, 817.0], [41.3, 818.0], [41.4, 818.0], [41.5, 820.0], [41.6, 821.0], [41.7, 821.0], [41.8, 822.0], [41.9, 823.0], [42.0, 824.0], [42.1, 825.0], [42.2, 825.0], [42.3, 826.0], [42.4, 827.0], [42.5, 828.0], [42.6, 828.0], [42.7, 829.0], [42.8, 830.0], [42.9, 830.0], [43.0, 831.0], [43.1, 832.0], [43.2, 832.0], [43.3, 833.0], [43.4, 834.0], [43.5, 834.0], [43.6, 835.0], [43.7, 836.0], [43.8, 837.0], [43.9, 837.0], [44.0, 838.0], [44.1, 838.0], [44.2, 839.0], [44.3, 839.0], [44.4, 840.0], [44.5, 840.0], [44.6, 841.0], [44.7, 841.0], [44.8, 842.0], [44.9, 843.0], [45.0, 844.0], [45.1, 844.0], [45.2, 845.0], [45.3, 846.0], [45.4, 847.0], [45.5, 847.0], [45.6, 848.0], [45.7, 848.0], [45.8, 849.0], [45.9, 850.0], [46.0, 851.0], [46.1, 852.0], [46.2, 852.0], [46.3, 854.0], [46.4, 854.0], [46.5, 855.0], [46.6, 855.0], [46.7, 856.0], [46.8, 857.0], [46.9, 858.0], [47.0, 858.0], [47.1, 859.0], [47.2, 859.0], [47.3, 860.0], [47.4, 861.0], [47.5, 861.0], [47.6, 862.0], [47.7, 862.0], [47.8, 863.0], [47.9, 863.0], [48.0, 864.0], [48.1, 864.0], [48.2, 865.0], [48.3, 866.0], [48.4, 866.0], [48.5, 867.0], [48.6, 867.0], [48.7, 868.0], [48.8, 868.0], [48.9, 869.0], [49.0, 870.0], [49.1, 870.0], [49.2, 871.0], [49.3, 871.0], [49.4, 872.0], [49.5, 872.0], [49.6, 873.0], [49.7, 873.0], [49.8, 874.0], [49.9, 875.0], [50.0, 875.0], [50.1, 876.0], [50.2, 876.0], [50.3, 877.0], [50.4, 878.0], [50.5, 878.0], [50.6, 879.0], [50.7, 879.0], [50.8, 880.0], [50.9, 881.0], [51.0, 881.0], [51.1, 882.0], [51.2, 882.0], [51.3, 883.0], [51.4, 883.0], [51.5, 883.0], [51.6, 884.0], [51.7, 885.0], [51.8, 885.0], [51.9, 886.0], [52.0, 886.0], [52.1, 887.0], [52.2, 888.0], [52.3, 888.0], [52.4, 889.0], [52.5, 889.0], [52.6, 890.0], [52.7, 891.0], [52.8, 891.0], [52.9, 892.0], [53.0, 893.0], [53.1, 893.0], [53.2, 894.0], [53.3, 894.0], [53.4, 895.0], [53.5, 895.0], [53.6, 896.0], [53.7, 896.0], [53.8, 897.0], [53.9, 897.0], [54.0, 898.0], [54.1, 898.0], [54.2, 899.0], [54.3, 899.0], [54.4, 900.0], [54.5, 900.0], [54.6, 901.0], [54.7, 901.0], [54.8, 902.0], [54.9, 903.0], [55.0, 903.0], [55.1, 904.0], [55.2, 905.0], [55.3, 906.0], [55.4, 906.0], [55.5, 907.0], [55.6, 907.0], [55.7, 908.0], [55.8, 909.0], [55.9, 909.0], [56.0, 910.0], [56.1, 911.0], [56.2, 912.0], [56.3, 913.0], [56.4, 915.0], [56.5, 916.0], [56.6, 917.0], [56.7, 918.0], [56.8, 919.0], [56.9, 920.0], [57.0, 921.0], [57.1, 922.0], [57.2, 924.0], [57.3, 925.0], [57.4, 926.0], [57.5, 928.0], [57.6, 931.0], [57.7, 932.0], [57.8, 933.0], [57.9, 934.0], [58.0, 936.0], [58.1, 937.0], [58.2, 940.0], [58.3, 942.0], [58.4, 943.0], [58.5, 945.0], [58.6, 946.0], [58.7, 948.0], [58.8, 950.0], [58.9, 953.0], [59.0, 954.0], [59.1, 956.0], [59.2, 957.0], [59.3, 960.0], [59.4, 962.0], [59.5, 962.0], [59.6, 965.0], [59.7, 966.0], [59.8, 968.0], [59.9, 970.0], [60.0, 972.0], [60.1, 974.0], [60.2, 975.0], [60.3, 976.0], [60.4, 977.0], [60.5, 978.0], [60.6, 979.0], [60.7, 980.0], [60.8, 981.0], [60.9, 982.0], [61.0, 983.0], [61.1, 984.0], [61.2, 986.0], [61.3, 987.0], [61.4, 989.0], [61.5, 990.0], [61.6, 991.0], [61.7, 992.0], [61.8, 993.0], [61.9, 994.0], [62.0, 995.0], [62.1, 996.0], [62.2, 997.0], [62.3, 999.0], [62.4, 1000.0], [62.5, 1002.0], [62.6, 1003.0], [62.7, 1004.0], [62.8, 1005.0], [62.9, 1007.0], [63.0, 1008.0], [63.1, 1010.0], [63.2, 1011.0], [63.3, 1011.0], [63.4, 1013.0], [63.5, 1014.0], [63.6, 1015.0], [63.7, 1018.0], [63.8, 1020.0], [63.9, 1021.0], [64.0, 1023.0], [64.1, 1026.0], [64.2, 1027.0], [64.3, 1029.0], [64.4, 1032.0], [64.5, 1033.0], [64.6, 1035.0], [64.7, 1036.0], [64.8, 1038.0], [64.9, 1039.0], [65.0, 1040.0], [65.1, 1041.0], [65.2, 1042.0], [65.3, 1043.0], [65.4, 1045.0], [65.5, 1047.0], [65.6, 1048.0], [65.7, 1049.0], [65.8, 1051.0], [65.9, 1051.0], [66.0, 1052.0], [66.1, 1053.0], [66.2, 1054.0], [66.3, 1055.0], [66.4, 1056.0], [66.5, 1057.0], [66.6, 1057.0], [66.7, 1058.0], [66.8, 1059.0], [66.9, 1060.0], [67.0, 1060.0], [67.1, 1062.0], [67.2, 1062.0], [67.3, 1063.0], [67.4, 1064.0], [67.5, 1065.0], [67.6, 1066.0], [67.7, 1066.0], [67.8, 1067.0], [67.9, 1068.0], [68.0, 1069.0], [68.1, 1070.0], [68.2, 1070.0], [68.3, 1071.0], [68.4, 1072.0], [68.5, 1073.0], [68.6, 1074.0], [68.7, 1075.0], [68.8, 1076.0], [68.9, 1077.0], [69.0, 1078.0], [69.1, 1079.0], [69.2, 1079.0], [69.3, 1080.0], [69.4, 1082.0], [69.5, 1083.0], [69.6, 1084.0], [69.7, 1085.0], [69.8, 1086.0], [69.9, 1087.0], [70.0, 1088.0], [70.1, 1088.0], [70.2, 1090.0], [70.3, 1091.0], [70.4, 1092.0], [70.5, 1093.0], [70.6, 1094.0], [70.7, 1095.0], [70.8, 1096.0], [70.9, 1097.0], [71.0, 1098.0], [71.1, 1100.0], [71.2, 1101.0], [71.3, 1102.0], [71.4, 1104.0], [71.5, 1104.0], [71.6, 1106.0], [71.7, 1108.0], [71.8, 1109.0], [71.9, 1110.0], [72.0, 1112.0], [72.1, 1113.0], [72.2, 1115.0], [72.3, 1116.0], [72.4, 1117.0], [72.5, 1119.0], [72.6, 1120.0], [72.7, 1122.0], [72.8, 1123.0], [72.9, 1124.0], [73.0, 1125.0], [73.1, 1126.0], [73.2, 1127.0], [73.3, 1128.0], [73.4, 1129.0], [73.5, 1129.0], [73.6, 1131.0], [73.7, 1133.0], [73.8, 1134.0], [73.9, 1135.0], [74.0, 1135.0], [74.1, 1137.0], [74.2, 1137.0], [74.3, 1139.0], [74.4, 1139.0], [74.5, 1141.0], [74.6, 1142.0], [74.7, 1143.0], [74.8, 1143.0], [74.9, 1145.0], [75.0, 1146.0], [75.1, 1147.0], [75.2, 1148.0], [75.3, 1149.0], [75.4, 1150.0], [75.5, 1152.0], [75.6, 1153.0], [75.7, 1154.0], [75.8, 1155.0], [75.9, 1157.0], [76.0, 1158.0], [76.1, 1159.0], [76.2, 1161.0], [76.3, 1161.0], [76.4, 1163.0], [76.5, 1164.0], [76.6, 1165.0], [76.7, 1165.0], [76.8, 1167.0], [76.9, 1169.0], [77.0, 1169.0], [77.1, 1170.0], [77.2, 1171.0], [77.3, 1172.0], [77.4, 1173.0], [77.5, 1174.0], [77.6, 1175.0], [77.7, 1176.0], [77.8, 1177.0], [77.9, 1178.0], [78.0, 1180.0], [78.1, 1182.0], [78.2, 1183.0], [78.3, 1184.0], [78.4, 1186.0], [78.5, 1188.0], [78.6, 1190.0], [78.7, 1191.0], [78.8, 1194.0], [78.9, 1195.0], [79.0, 1196.0], [79.1, 1198.0], [79.2, 1199.0], [79.3, 1201.0], [79.4, 1203.0], [79.5, 1204.0], [79.6, 1205.0], [79.7, 1207.0], [79.8, 1210.0], [79.9, 1211.0], [80.0, 1212.0], [80.1, 1213.0], [80.2, 1216.0], [80.3, 1217.0], [80.4, 1219.0], [80.5, 1221.0], [80.6, 1223.0], [80.7, 1225.0], [80.8, 1228.0], [80.9, 1230.0], [81.0, 1232.0], [81.1, 1233.0], [81.2, 1235.0], [81.3, 1236.0], [81.4, 1238.0], [81.5, 1240.0], [81.6, 1242.0], [81.7, 1244.0], [81.8, 1246.0], [81.9, 1247.0], [82.0, 1249.0], [82.1, 1251.0], [82.2, 1253.0], [82.3, 1255.0], [82.4, 1256.0], [82.5, 1258.0], [82.6, 1260.0], [82.7, 1261.0], [82.8, 1263.0], [82.9, 1264.0], [83.0, 1265.0], [83.1, 1266.0], [83.2, 1268.0], [83.3, 1269.0], [83.4, 1270.0], [83.5, 1272.0], [83.6, 1275.0], [83.7, 1277.0], [83.8, 1278.0], [83.9, 1280.0], [84.0, 1282.0], [84.1, 1285.0], [84.2, 1289.0], [84.3, 1291.0], [84.4, 1294.0], [84.5, 1296.0], [84.6, 1298.0], [84.7, 1300.0], [84.8, 1303.0], [84.9, 1305.0], [85.0, 1307.0], [85.1, 1310.0], [85.2, 1313.0], [85.3, 1315.0], [85.4, 1318.0], [85.5, 1321.0], [85.6, 1324.0], [85.7, 1325.0], [85.8, 1326.0], [85.9, 1328.0], [86.0, 1331.0], [86.1, 1335.0], [86.2, 1336.0], [86.3, 1339.0], [86.4, 1342.0], [86.5, 1344.0], [86.6, 1346.0], [86.7, 1347.0], [86.8, 1349.0], [86.9, 1351.0], [87.0, 1353.0], [87.1, 1355.0], [87.2, 1356.0], [87.3, 1359.0], [87.4, 1361.0], [87.5, 1363.0], [87.6, 1367.0], [87.7, 1369.0], [87.8, 1372.0], [87.9, 1375.0], [88.0, 1379.0], [88.1, 1384.0], [88.2, 1388.0], [88.3, 1393.0], [88.4, 1398.0], [88.5, 1401.0], [88.6, 1404.0], [88.7, 1407.0], [88.8, 1409.0], [88.9, 1411.0], [89.0, 1414.0], [89.1, 1418.0], [89.2, 1423.0], [89.3, 1427.0], [89.4, 1429.0], [89.5, 1432.0], [89.6, 1435.0], [89.7, 1439.0], [89.8, 1442.0], [89.9, 1444.0], [90.0, 1446.0], [90.1, 1448.0], [90.2, 1452.0], [90.3, 1453.0], [90.4, 1455.0], [90.5, 1457.0], [90.6, 1459.0], [90.7, 1461.0], [90.8, 1464.0], [90.9, 1466.0], [91.0, 1468.0], [91.1, 1470.0], [91.2, 1471.0], [91.3, 1472.0], [91.4, 1474.0], [91.5, 1476.0], [91.6, 1478.0], [91.7, 1481.0], [91.8, 1482.0], [91.9, 1483.0], [92.0, 1485.0], [92.1, 1487.0], [92.2, 1489.0], [92.3, 1491.0], [92.4, 1494.0], [92.5, 1497.0], [92.6, 1499.0], [92.7, 1505.0], [92.8, 1508.0], [92.9, 1511.0], [93.0, 1514.0], [93.1, 1519.0], [93.2, 1526.0], [93.3, 1531.0], [93.4, 1535.0], [93.5, 1539.0], [93.6, 1541.0], [93.7, 1543.0], [93.8, 1546.0], [93.9, 1548.0], [94.0, 1551.0], [94.1, 1554.0], [94.2, 1557.0], [94.3, 1559.0], [94.4, 1561.0], [94.5, 1566.0], [94.6, 1570.0], [94.7, 1575.0], [94.8, 1578.0], [94.9, 1582.0], [95.0, 1589.0], [95.1, 1596.0], [95.2, 1600.0], [95.3, 1607.0], [95.4, 1615.0], [95.5, 1621.0], [95.6, 1625.0], [95.7, 1633.0], [95.8, 1649.0], [95.9, 1659.0], [96.0, 1666.0], [96.1, 1671.0], [96.2, 1677.0], [96.3, 1687.0], [96.4, 1696.0], [96.5, 1708.0], [96.6, 1718.0], [96.7, 1725.0], [96.8, 1734.0], [96.9, 1740.0], [97.0, 1751.0], [97.1, 1770.0], [97.2, 1782.0], [97.3, 1788.0], [97.4, 1799.0], [97.5, 1807.0], [97.6, 1815.0], [97.7, 1820.0], [97.8, 1829.0], [97.9, 1836.0], [98.0, 1845.0], [98.1, 1853.0], [98.2, 1865.0], [98.3, 1869.0], [98.4, 1883.0], [98.5, 1900.0], [98.6, 1917.0], [98.7, 1936.0], [98.8, 1964.0], [98.9, 1995.0], [99.0, 2022.0], [99.1, 2066.0], [99.2, 2090.0], [99.3, 2119.0], [99.4, 2152.0], [99.5, 2185.0], [99.6, 2236.0], [99.7, 2292.0], [99.8, 2377.0], [99.9, 2505.0], [100.0, 2969.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1535.0, "series": [{"data": [[0.0, 1.0], [600.0, 1382.0], [700.0, 1053.0], [800.0, 1535.0], [900.0, 795.0], [1000.0, 874.0], [1100.0, 815.0], [1200.0, 545.0], [1300.0, 377.0], [1400.0, 416.0], [1500.0, 258.0], [100.0, 18.0], [1600.0, 125.0], [1700.0, 97.0], [1800.0, 108.0], [1900.0, 43.0], [2000.0, 29.0], [2100.0, 32.0], [2200.0, 19.0], [2300.0, 10.0], [2400.0, 7.0], [2500.0, 2.0], [2600.0, 3.0], [2800.0, 4.0], [2700.0, 1.0], [2900.0, 1.0], [200.0, 54.0], [300.0, 167.0], [400.0, 331.0], [500.0, 898.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 249.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8460.0, "series": [{"data": [[0.0, 554.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8460.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 737.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 249.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 652.3100999999996, "minX": 1.73403576E12, "maxY": 652.3100999999996, "series": [{"data": [[1.73403576E12, 652.3100999999996]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403576E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 209.28571428571428, "minX": 1.0, "maxY": 2289.0, "series": [{"data": [[2.0, 902.0], [3.0, 611.0], [7.0, 647.5], [9.0, 602.0], [10.0, 754.0], [14.0, 762.6666666666666], [16.0, 603.6666666666666], [18.0, 608.5], [20.0, 611.5], [21.0, 611.0], [22.0, 917.0], [24.0, 606.0], [25.0, 608.0], [27.0, 869.3333333333334], [29.0, 603.5], [30.0, 615.0], [31.0, 617.0], [33.0, 759.0], [32.0, 758.0], [35.0, 759.0], [34.0, 613.0], [38.0, 714.0], [41.0, 604.0], [40.0, 610.5], [43.0, 756.0], [42.0, 921.0], [45.0, 621.0], [44.0, 761.0], [47.0, 769.0], [46.0, 767.0], [48.0, 624.0], [51.0, 755.0], [50.0, 762.0], [53.0, 621.0], [52.0, 840.0], [55.0, 626.0], [54.0, 621.0], [57.0, 692.5], [59.0, 629.0], [58.0, 626.0], [61.0, 618.0], [60.0, 622.0], [63.0, 772.0], [62.0, 763.0], [67.0, 771.5], [65.0, 769.5], [69.0, 627.0], [68.0, 634.0], [75.0, 770.0], [74.0, 631.0], [73.0, 641.0], [72.0, 723.3333333333334], [79.0, 638.0], [77.0, 767.0], [76.0, 636.0], [83.0, 630.0], [82.0, 630.0], [81.0, 633.0], [80.0, 636.0], [87.0, 714.5], [85.0, 789.0], [84.0, 767.0], [90.0, 778.0], [89.0, 646.0], [95.0, 789.0], [94.0, 922.0], [93.0, 635.0], [92.0, 710.5], [98.0, 634.0], [97.0, 644.0], [96.0, 927.0], [102.0, 710.0], [101.0, 635.0], [100.0, 793.0], [107.0, 788.0], [106.0, 639.0], [105.0, 645.0], [104.0, 637.5], [111.0, 788.0], [109.0, 790.0], [108.0, 640.0], [115.0, 936.0], [114.0, 643.0], [113.0, 789.0], [112.0, 1051.5], [123.0, 638.0], [122.0, 937.0], [121.0, 665.1666666666667], [127.0, 643.0], [126.0, 642.0], [125.0, 638.0], [124.0, 794.0], [134.0, 645.0], [133.0, 697.3333333333334], [132.0, 641.0], [129.0, 802.0], [128.0, 803.0], [143.0, 714.2857142857142], [136.0, 724.0], [150.0, 803.0], [149.0, 654.0], [148.0, 649.5], [146.0, 649.0], [145.0, 643.0], [144.0, 654.0], [157.0, 749.6666666666666], [156.0, 652.0], [153.0, 652.0], [152.0, 648.5], [167.0, 732.5], [166.0, 807.0], [164.0, 654.0], [163.0, 659.0], [161.0, 653.0], [160.0, 652.3333333333334], [175.0, 661.4], [174.0, 632.0], [173.0, 671.0], [172.0, 854.0], [171.0, 641.6], [183.0, 700.0], [182.0, 491.5], [180.0, 747.3333333333334], [179.0, 763.3333333333334], [181.0, 712.6666666666666], [178.0, 833.0], [176.0, 826.2], [177.0, 977.0], [189.0, 209.28571428571428], [190.0, 531.2222222222222], [191.0, 458.33333333333337], [186.0, 655.3333333333334], [188.0, 518.3333333333334], [185.0, 543.0], [187.0, 699.5], [184.0, 721.6666666666666], [193.0, 805.0], [192.0, 591.0], [198.0, 973.5], [197.0, 765.6666666666666], [199.0, 821.0], [196.0, 672.0], [195.0, 596.0], [207.0, 488.5], [203.0, 471.85714285714283], [206.0, 431.6666666666667], [204.0, 697.0], [201.0, 893.0], [200.0, 599.5], [205.0, 871.6666666666666], [214.0, 503.6666666666667], [208.0, 434.83333333333337], [211.0, 498.65], [210.0, 441.6], [209.0, 702.0], [213.0, 804.0], [215.0, 522.0], [212.0, 835.0], [218.0, 485.75], [217.0, 413.0], [216.0, 943.6666666666666], [220.0, 947.3333333333334], [219.0, 286.33333333333337], [223.0, 297.0], [222.0, 930.0], [221.0, 967.0], [225.0, 460.75], [226.0, 672.8333333333333], [224.0, 770.2857142857142], [229.0, 528.6], [228.0, 897.5], [227.0, 1067.3333333333333], [231.0, 615.0], [236.0, 766.25], [237.0, 643.5], [235.0, 1082.625], [233.0, 1064.3333333333333], [239.0, 680.0], [232.0, 541.0], [246.0, 1241.3333333333333], [247.0, 745.8333333333334], [245.0, 1494.5], [244.0, 945.3333333333334], [243.0, 1150.0], [241.0, 835.0], [240.0, 544.0], [253.0, 1205.8888888888891], [250.0, 633.25], [249.0, 1032.0], [248.0, 807.6], [251.0, 1018.2222222222221], [255.0, 1286.5], [254.0, 1163.3000000000002], [252.0, 1066.0], [256.0, 642.0], [260.0, 916.875], [259.0, 695.0], [270.0, 825.0], [268.0, 980.0], [258.0, 1250.5], [257.0, 798.5714285714286], [261.0, 963.6666666666666], [263.0, 1195.3333333333333], [262.0, 937.0], [265.0, 1223.0], [264.0, 689.0], [267.0, 647.0], [271.0, 757.5], [285.0, 1477.25], [273.0, 933.0], [287.0, 1172.0], [286.0, 1071.5], [284.0, 1028.0], [275.0, 546.0], [274.0, 546.0], [283.0, 549.5], [281.0, 699.0], [280.0, 990.0], [279.0, 692.0], [272.0, 550.0], [277.0, 696.0], [276.0, 701.0], [295.0, 522.5], [290.0, 975.4], [292.0, 592.3333333333334], [291.0, 889.5], [300.0, 984.6], [303.0, 406.3333333333333], [302.0, 548.0], [301.0, 832.0], [289.0, 792.3333333333334], [288.0, 900.75], [293.0, 920.8333333333333], [294.0, 620.4], [298.0, 1014.25], [297.0, 1000.0], [299.0, 870.5], [296.0, 1081.4444444444443], [306.0, 1498.4], [312.0, 1096.2499999999998], [304.0, 1794.75], [305.0, 730.0], [313.0, 1429.8333333333333], [315.0, 543.0], [314.0, 626.0], [311.0, 1056.0], [310.0, 1419.857142857143], [309.0, 1080.375], [308.0, 1192.5714285714287], [307.0, 1419.5], [317.0, 621.0], [318.0, 429.0], [319.0, 518.5], [321.0, 1124.6666666666667], [320.0, 1028.2], [322.0, 682.5], [323.0, 932.0], [324.0, 681.8], [325.0, 417.5], [326.0, 939.8333333333334], [329.0, 488.4], [328.0, 997.3333333333333], [334.0, 1558.6666666666667], [333.0, 774.0], [335.0, 602.0], [327.0, 1198.0], [332.0, 897.2], [330.0, 722.75], [331.0, 701.0], [348.0, 978.5], [336.0, 451.0], [337.0, 544.6666666666666], [338.0, 470.5], [339.0, 842.0], [340.0, 1023.5], [341.0, 835.0], [351.0, 398.0], [350.0, 626.8333333333334], [349.0, 714.0], [346.0, 740.2], [365.0, 932.25], [353.0, 864.8571428571429], [352.0, 607.5], [359.0, 837.0], [358.0, 840.0], [354.0, 1223.0], [357.0, 1065.25], [356.0, 752.1666666666667], [366.0, 894.5], [364.0, 461.3333333333333], [367.0, 550.0], [362.0, 694.0], [361.0, 555.0], [360.0, 709.0], [371.0, 929.0], [373.0, 603.4285714285714], [372.0, 731.8333333333333], [370.0, 510.66666666666663], [369.0, 913.3333333333334], [368.0, 557.5], [378.0, 914.0], [377.0, 1085.3636363636363], [379.0, 832.8333333333334], [376.0, 989.909090909091], [380.0, 489.875], [381.0, 359.5], [382.0, 359.0], [383.0, 597.6], [374.0, 1220.2], [375.0, 826.1999999999999], [396.0, 733.3333333333333], [398.0, 557.3333333333334], [385.0, 471.16666666666663], [384.0, 563.0], [387.0, 568.0], [386.0, 877.3333333333334], [395.0, 1336.2499999999998], [394.0, 530.75], [397.0, 667.0], [393.0, 868.6923076923076], [392.0, 1078.125], [391.0, 1097.0000000000002], [389.0, 685.0000000000001], [390.0, 801.6666666666666], [388.0, 772.0], [402.0, 367.0], [404.0, 517.0], [403.0, 584.0], [413.0, 1120.0], [412.0, 669.6666666666666], [401.0, 623.1666666666666], [405.0, 602.0], [400.0, 694.8333333333334], [406.0, 1454.5], [407.0, 1122.0], [414.0, 712.0], [415.0, 648.5], [409.0, 985.5], [430.0, 580.0], [416.0, 566.0], [421.0, 412.0], [420.0, 726.0], [423.0, 1119.0], [422.0, 575.5], [427.0, 418.0], [426.0, 495.0], [429.0, 1823.5], [431.0, 1531.6666666666667], [428.0, 803.0], [419.0, 756.6666666666666], [425.0, 805.0], [444.0, 407.0], [433.0, 627.3333333333334], [432.0, 434.0], [434.0, 2289.0], [435.0, 729.0], [438.0, 674.2], [437.0, 804.0], [436.0, 578.0], [440.0, 583.5], [439.0, 1507.3333333333333], [442.0, 404.0], [441.0, 805.0], [443.0, 806.0], [445.0, 789.0], [447.0, 730.0], [446.0, 805.0], [463.0, 964.6363636363637], [455.0, 892.0], [453.0, 814.6], [454.0, 1085.0], [452.0, 791.0], [461.0, 746.8235294117648], [462.0, 671.8000000000002], [460.0, 698.0], [450.0, 885.0], [449.0, 599.0], [448.0, 1129.0], [458.0, 911.0909090909091], [456.0, 504.25], [459.0, 654.4], [457.0, 777.7857142857142], [476.0, 841.2222222222224], [464.0, 949.3750000000001], [467.0, 1059.1538461538457], [466.0, 797.0], [465.0, 912.6470588235294], [468.0, 749.5625], [469.0, 736.125], [475.0, 897.3636363636364], [474.0, 756.6500000000001], [473.0, 771.5294117647059], [471.0, 681.75], [470.0, 991.5999999999999], [472.0, 975.0833333333334], [478.0, 755.4999999999999], [477.0, 1219.3750000000002], [479.0, 819.0], [483.0, 659.7857142857142], [480.0, 703.1428571428571], [487.0, 880.75], [486.0, 733.1111111111111], [485.0, 1006.1666666666666], [484.0, 874.2222222222223], [482.0, 667.235294117647], [481.0, 715.4545454545455], [493.0, 706.2222222222222], [494.0, 927.1428571428571], [488.0, 587.3333333333334], [495.0, 928.8], [492.0, 785.0], [491.0, 790.8], [490.0, 614.0], [489.0, 771.75], [508.0, 735.0], [497.0, 700.0], [496.0, 944.7777777777778], [503.0, 858.5], [501.0, 759.5], [498.0, 764.3333333333334], [499.0, 591.0], [511.0, 605.0], [510.0, 1361.0], [509.0, 624.0], [507.0, 991.3333333333334], [504.0, 739.0], [541.0, 858.7142857142858], [531.0, 875.0], [530.0, 876.6], [532.0, 800.6153846153846], [533.0, 834.75], [529.0, 848.6666666666666], [528.0, 761.25], [543.0, 858.2258064516127], [542.0, 814.0], [540.0, 793.8461538461539], [534.0, 585.4000000000001], [535.0, 858.9999999999999], [539.0, 769.75], [538.0, 918.125], [537.0, 695.3636363636364], [536.0, 629.8571428571429], [519.0, 739.0], [518.0, 743.0], [517.0, 612.0], [516.0, 947.0], [515.0, 949.0], [514.0, 1008.6666666666666], [527.0, 619.5], [525.0, 741.0], [524.0, 739.0], [523.0, 943.0], [522.0, 751.0], [521.0, 942.0], [520.0, 605.0], [550.0, 832.8076923076923], [545.0, 835.2307692307693], [544.0, 776.1935483870968], [546.0, 740.6500000000001], [547.0, 767.0666666666666], [549.0, 807.0952380952381], [548.0, 881.0625], [551.0, 833.8399999999998], [569.0, 800.5428571428571], [568.0, 854.3571428571429], [570.0, 856.3589743589745], [571.0, 844.4333333333334], [572.0, 891.1538461538462], [573.0, 883.9], [575.0, 818.7142857142858], [574.0, 897.1428571428572], [555.0, 989.9499999999999], [554.0, 791.7499999999999], [553.0, 796.2333333333335], [552.0, 667.0], [556.0, 674.2499999999999], [557.0, 773.4444444444445], [558.0, 871.5], [559.0, 769.782608695652], [560.0, 801.170731707317], [566.0, 803.72], [565.0, 779.8095238095237], [563.0, 673.85], [562.0, 778.642857142857], [561.0, 683.8095238095237], [564.0, 771.5294117647059], [567.0, 841.8846153846152], [600.0, 925.2045454545453], [577.0, 906.6000000000001], [576.0, 857.0909090909092], [589.0, 967.1538461538462], [588.0, 968.7428571428572], [587.0, 946.0], [586.0, 893.6470588235295], [590.0, 914.9302325581397], [591.0, 873.2830188679243], [583.0, 823.8571428571429], [592.0, 964.0980392156863], [603.0, 920.5645161290322], [601.0, 914.3055555555554], [602.0, 964.9111111111112], [606.0, 1047.7499999999998], [605.0, 1046.111111111111], [604.0, 882.488888888889], [607.0, 1015.1666666666669], [594.0, 926.5862068965517], [593.0, 860.2666666666668], [596.0, 937.3191489361701], [597.0, 889.7058823529412], [598.0, 868.3947368421052], [599.0, 872.1249999999999], [595.0, 963.3749999999998], [581.0, 855.4500000000002], [582.0, 865.8571428571428], [584.0, 888.1388888888889], [580.0, 964.2272727272725], [578.0, 819.3428571428574], [579.0, 842.3749999999999], [585.0, 878.0512820512822], [614.0, 948.4857142857143], [609.0, 954.5185185185184], [611.0, 962.2820512820514], [608.0, 1074.78125], [623.0, 852.8095238095239], [621.0, 890.8076923076923], [622.0, 1028.4166666666665], [610.0, 921.1333333333333], [612.0, 952.3939393939394], [613.0, 1098.375], [615.0, 929.0967741935484], [633.0, 852.3103448275862], [632.0, 908.625], [634.0, 830.5625], [635.0, 970.3846153846154], [637.0, 789.4444444444445], [639.0, 920.9333333333335], [625.0, 946.5161290322579], [624.0, 988.6206896551723], [638.0, 849.9411764705883], [636.0, 924.35], [626.0, 959.4827586206893], [627.0, 918.2105263157895], [628.0, 766.9285714285713], [629.0, 804.2083333333335], [631.0, 964.2758620689655], [630.0, 780.3529411764706], [618.0, 956.3750000000001], [617.0, 927.8571428571429], [616.0, 877.6666666666666], [619.0, 923.6666666666666], [620.0, 949.3846153846152], [642.0, 877.1764705882352], [643.0, 887.5454545454544], [645.0, 822.2105263157896], [644.0, 881.7368421052632], [641.0, 883.0588235294117], [640.0, 1038.214285714286], [650.0, 821.75], [651.0, 736.375], [652.0, 923.8750000000001], [653.0, 778.9047619047618], [654.0, 766.9333333333334], [655.0, 902.5454545454545], [649.0, 722.4642857142857], [648.0, 871.8387096774194], [647.0, 701.8461538461539], [664.0, 761.2727272727274], [666.0, 881.6153846153845], [665.0, 766.9999999999999], [668.0, 853.1818181818181], [667.0, 742.2], [657.0, 730.4285714285714], [656.0, 886.6818181818184], [671.0, 773.8000000000001], [670.0, 957.1999999999999], [669.0, 948.4444444444446], [659.0, 816.5714285714286], [658.0, 954.1428571428571], [661.0, 818.9166666666666], [662.0, 1010.0000000000001], [663.0, 800.1], [660.0, 830.8749999999999], [646.0, 938.375], [677.0, 926.6874999999997], [673.0, 867.4848484848485], [672.0, 889.5833333333334], [687.0, 800.75], [686.0, 956.7333333333333], [674.0, 761.4347826086956], [675.0, 833.0909090909089], [679.0, 826.8095238095237], [688.0, 809.3846153846154], [696.0, 922.2499999999999], [698.0, 869.1666666666667], [697.0, 923.0400000000001], [699.0, 854.1923076923076], [700.0, 887.5217391304348], [702.0, 738.5], [703.0, 994.25], [701.0, 1007.0909090909091], [690.0, 858.090909090909], [689.0, 915.875], [691.0, 886.9999999999999], [693.0, 862.2272727272727], [695.0, 907.2222222222222], [694.0, 893.346153846154], [692.0, 1149.5714285714287], [678.0, 964.4210526315788], [676.0, 892.2571428571429], [684.0, 900.5384615384615], [685.0, 823.75], [683.0, 944.0833333333334], [682.0, 862.0909090909091], [681.0, 888.3499999999998], [680.0, 912.9], [710.0, 1196.6363636363637], [705.0, 918.0], [704.0, 960.1428571428571], [719.0, 1014.5714285714286], [716.0, 1106.7142857142858], [717.0, 1025.9999999999998], [718.0, 1051.142857142857], [715.0, 1135.625], [714.0, 1008.6], [706.0, 967.0], [708.0, 1053.2], [709.0, 956.5714285714286], [713.0, 1059.7], [712.0, 976.3333333333331], [711.0, 967.4], [728.0, 1265.8936170212764], [731.0, 1052.7636363636366], [730.0, 1162.5749999999998], [729.0, 1108.810810810811], [720.0, 1120.2], [735.0, 1044.4], [734.0, 1073.5500000000002], [733.0, 1134.0], [732.0, 1173.6382978723402], [722.0, 1045.4117647058824], [723.0, 1108.1428571428573], [724.0, 1086.8124999999998], [727.0, 1138.515151515152], [726.0, 1174.6250000000002], [725.0, 1032.7083333333333], [721.0, 1164.5263157894735], [707.0, 1018.3], [743.0, 1041.542857142857], [738.0, 1119.8095238095234], [736.0, 1133.1875], [737.0, 1136.4285714285716], [751.0, 989.4], [750.0, 1035.3636363636365], [749.0, 1166.8750000000002], [748.0, 1002.4999999999999], [739.0, 1186.222222222222], [742.0, 1163.1764705882354], [741.0, 1145.7297297297298], [740.0, 1050.625], [752.0, 1152.3], [761.0, 1245.111111111111], [760.0, 1147.125], [764.0, 978.4], [763.0, 1294.1111111111113], [762.0, 1044.2631578947369], [766.0, 1280.6666666666665], [765.0, 964.7692307692307], [767.0, 1038.3076923076924], [753.0, 1102.8333333333335], [755.0, 1030.130434782608], [756.0, 1018.8], [758.0, 1041.4705882352941], [759.0, 1179.2857142857142], [757.0, 1062.0], [754.0, 1049.0], [744.0, 1016.1249999999999], [746.0, 1217.5], [745.0, 1025.818181818182], [747.0, 984.2222222222222], [775.0, 1239.7872340425536], [770.0, 1176.1764705882354], [768.0, 1104.875], [773.0, 1174.1785714285716], [772.0, 1056.666666666667], [785.0, 1244.2285714285713], [786.0, 1185.6800000000003], [792.0, 1267.277777777778], [784.0, 1226.1538461538457], [798.0, 1005.6666666666666], [799.0, 1265.4285714285713], [796.0, 1150.105263157895], [795.0, 1122.090909090909], [794.0, 1181.846153846154], [797.0, 1012.8125], [793.0, 1175.8666666666666], [787.0, 1174.472222222222], [788.0, 981.0384615384615], [789.0, 1162.1052631578948], [790.0, 1185.1], [791.0, 1194.65625], [774.0, 1137.4666666666667], [771.0, 1157.6666666666667], [769.0, 1128.0833333333333], [777.0, 1193.1176470588234], [776.0, 1090.4848484848485], [780.0, 1363.2083333333333], [779.0, 1202.730769230769], [781.0, 1297.4571428571428], [783.0, 1178.7407407407404], [782.0, 1282.5652173913045], [778.0, 1257.571428571429], [806.0, 1210.3636363636363], [801.0, 1193.1818181818182], [800.0, 1176.4999999999998], [815.0, 1118.25], [814.0, 1122.8749999999998], [813.0, 1076.3846153846155], [811.0, 1101.9375], [810.0, 1188.769230769231], [812.0, 1088.0], [803.0, 1215.5833333333333], [805.0, 1246.0666666666668], [804.0, 1164.5384615384614], [802.0, 1185.1538461538462], [807.0, 1355.0833333333335], [824.0, 1158.535714285714], [816.0, 1099.1176470588234], [830.0, 1198.0416666666667], [829.0, 1248.6842105263156], [828.0, 1157.8285714285712], [827.0, 1106.7333333333331], [826.0, 1000.5882352941175], [831.0, 1143.7222222222222], [825.0, 1161.9629629629628], [818.0, 1126.3750000000002], [817.0, 1191.8666666666668], [820.0, 1209.3548387096773], [819.0, 1108.44], [822.0, 1092.1], [823.0, 1106.6363636363635], [821.0, 1112.3333333333333], [808.0, 1178.2727272727273], [809.0, 1175.8333333333335], [839.0, 966.0], [835.0, 1189.2], [838.0, 1087.75], [837.0, 1005.2857142857142], [836.0, 1017.5555555555555], [834.0, 1203.3461538461536], [833.0, 1020.4615384615386], [832.0, 1203.7222222222222], [847.0, 843.0], [845.0, 1024.5], [846.0, 942.6999999999999], [844.0, 1104.95], [843.0, 1145.125], [842.0, 979.3125], [851.0, 875.8181818181819], [849.0, 813.0], [850.0, 884.4], [848.0, 860.6249999999999], [852.0, 897.7], [858.0, 826.6363636363636], [859.0, 787.3333333333334], [862.0, 711.8], [861.0, 862.6666666666666], [860.0, 817.1428571428571], [863.0, 667.5], [856.0, 695.0], [857.0, 871.6666666666667], [854.0, 982.7692307692307], [855.0, 937.2], [853.0, 830.0], [841.0, 953.75], [840.0, 825.5833333333335], [866.0, 1001.6], [865.0, 896.2], [864.0, 825.6], [867.0, 1046.5], [868.0, 693.5], [869.0, 742.0], [871.0, 781.625], [870.0, 857.5], [890.0, 968.7142857142857], [889.0, 982.3333333333334], [888.0, 1173.25], [892.0, 875.7777777777777], [891.0, 831.6666666666667], [893.0, 1034.6666666666667], [895.0, 983.7272727272727], [894.0, 848.8181818181819], [881.0, 943.6666666666667], [883.0, 874.8125], [882.0, 817.9333333333334], [884.0, 907.0], [887.0, 1041.7857142857144], [886.0, 974.3333333333333], [885.0, 905.5833333333333], [880.0, 963.578947368421], [879.0, 917.3809523809524], [878.0, 998.0909090909091], [877.0, 859.3846153846154], [876.0, 796.4166666666667], [875.0, 649.6666666666666], [874.0, 831.1111111111111], [872.0, 859.8461538461537], [873.0, 842.3333333333333], [921.0, 852.875], [899.0, 775.6250000000001], [904.0, 908.8181818181819], [903.0, 813.4545454545455], [902.0, 1085.75], [901.0, 817.5714285714286], [900.0, 893.2], [905.0, 977.0000000000002], [906.0, 837.5000000000001], [908.0, 782.2857142857143], [907.0, 855.0833333333333], [909.0, 1075.4], [911.0, 921.5714285714286], [897.0, 812.25], [898.0, 920.8], [896.0, 871.6666666666666], [910.0, 881.0909090909091], [912.0, 941.0], [927.0, 906.7500000000002], [925.0, 784.2916666666666], [926.0, 917.8333333333335], [922.0, 844.3529411764705], [923.0, 799.3333333333334], [924.0, 915.8888888888889], [920.0, 892.5], [913.0, 734.0], [916.0, 854.6666666666666], [917.0, 873.0], [919.0, 1284.6666666666667], [918.0, 767.75], [915.0, 1043.875], [914.0, 967.625], [952.0, 958.5], [931.0, 866.304347826087], [928.0, 832.9444444444445], [943.0, 1075.3636363636365], [942.0, 991.5384615384617], [941.0, 975.529411764706], [940.0, 983.9393939393941], [939.0, 898.8888888888888], [932.0, 870.2142857142857], [930.0, 939.5714285714284], [929.0, 849.3043478260869], [935.0, 849.5833333333333], [953.0, 1065.5], [954.0, 1049.3333333333333], [958.0, 1118.75], [959.0, 858.6], [946.0, 903.2307692307693], [947.0, 899.0000000000001], [945.0, 888.3750000000001], [944.0, 802.2307692307692], [957.0, 1073.1666666666665], [955.0, 1080.4615384615386], [956.0, 1120.3333333333333], [948.0, 952.470588235294], [950.0, 904.0714285714284], [949.0, 1100.4615384615386], [951.0, 1044.1333333333334], [934.0, 863.5], [933.0, 860.5263157894736], [936.0, 932.9259259259259], [937.0, 926.7037037037037], [938.0, 937.8947368421052], [960.0, 1159.5], [963.0, 651.5], [962.0, 1009.0], [961.0, 1009.0], [964.0, 1006.0], [1.0, 762.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[652.3102000000039, 942.6499000000014]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 964.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 52494.13333333333, "minX": 1.73403576E12, "maxY": 96327.23333333334, "series": [{"data": [[1.73403576E12, 96327.23333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73403576E12, 52494.13333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403576E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 942.6499000000014, "minX": 1.73403576E12, "maxY": 942.6499000000014, "series": [{"data": [[1.73403576E12, 942.6499000000014]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403576E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 942.4659000000028, "minX": 1.73403576E12, "maxY": 942.4659000000028, "series": [{"data": [[1.73403576E12, 942.4659000000028]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403576E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.0813000000000033, "minX": 1.73403576E12, "maxY": 3.0813000000000033, "series": [{"data": [[1.73403576E12, 3.0813000000000033]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403576E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 81.0, "minX": 1.73403576E12, "maxY": 2969.0, "series": [{"data": [[1.73403576E12, 2969.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73403576E12, 1452.800000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73403576E12, 2036.9599999999991]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73403576E12, 1597.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73403576E12, 81.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73403576E12, 881.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403576E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 262.5, "minX": 148.0, "maxY": 1198.5, "series": [{"data": [[547.0, 775.0], [148.0, 533.5], [601.0, 1123.0], [157.0, 1176.0], [629.0, 752.5], [620.0, 901.0], [621.0, 1067.0], [619.0, 1176.5], [650.0, 836.0], [643.0, 921.0], [642.0, 907.0], [784.0, 778.0], [797.0, 1198.5], [1083.0, 862.0], [1046.0, 726.0], [413.0, 767.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[148.0, 292.0], [601.0, 865.0], [629.0, 493.0], [620.0, 652.0], [621.0, 838.0], [619.0, 873.0], [650.0, 598.5], [643.0, 692.5], [642.0, 643.0], [784.0, 556.0], [797.0, 829.0], [1083.0, 668.0], [1046.0, 597.5], [413.0, 262.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1083.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 262.5, "minX": 148.0, "maxY": 1198.5, "series": [{"data": [[547.0, 774.0], [148.0, 533.5], [601.0, 1123.0], [157.0, 1176.0], [629.0, 752.5], [620.0, 901.0], [621.0, 1067.0], [619.0, 1176.5], [650.0, 836.0], [643.0, 921.0], [642.0, 907.0], [784.0, 777.5], [797.0, 1198.5], [1083.0, 861.5], [1046.0, 726.0], [413.0, 767.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[148.0, 291.5], [601.0, 865.0], [629.0, 493.0], [620.0, 652.0], [621.0, 837.5], [619.0, 869.0], [650.0, 598.5], [643.0, 691.0], [642.0, 642.5], [784.0, 555.0], [797.0, 829.0], [1083.0, 668.0], [1046.0, 597.5], [413.0, 262.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1083.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.73403576E12, "maxY": 166.66666666666666, "series": [{"data": [[1.73403576E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403576E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.73403576E12, "maxY": 162.51666666666668, "series": [{"data": [[1.73403576E12, 162.51666666666668]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.73403576E12, 4.116666666666666]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.73403576E12, 0.03333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403576E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.15, "minX": 1.73403576E12, "maxY": 162.51666666666668, "series": [{"data": [[1.73403576E12, 162.51666666666668]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.73403576E12, 4.15]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403576E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.15, "minX": 1.73403576E12, "maxY": 162.51666666666668, "series": [{"data": [[1.73403576E12, 162.51666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73403576E12, 4.15]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403576E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

