/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 480.0, "minX": 0.0, "maxY": 4787.0, "series": [{"data": [[0.0, 480.0], [0.1, 499.0], [0.2, 516.0], [0.3, 535.0], [0.4, 545.0], [0.5, 550.0], [0.6, 561.0], [0.7, 565.0], [0.8, 572.0], [0.9, 581.0], [1.0, 584.0], [1.1, 586.0], [1.2, 589.0], [1.3, 593.0], [1.4, 597.0], [1.5, 600.0], [1.6, 607.0], [1.7, 610.0], [1.8, 616.0], [1.9, 620.0], [2.0, 622.0], [2.1, 625.0], [2.2, 628.0], [2.3, 633.0], [2.4, 636.0], [2.5, 639.0], [2.6, 651.0], [2.7, 657.0], [2.8, 659.0], [2.9, 665.0], [3.0, 669.0], [3.1, 674.0], [3.2, 677.0], [3.3, 680.0], [3.4, 681.0], [3.5, 686.0], [3.6, 695.0], [3.7, 700.0], [3.8, 703.0], [3.9, 708.0], [4.0, 724.0], [4.1, 737.0], [4.2, 744.0], [4.3, 749.0], [4.4, 751.0], [4.5, 754.0], [4.6, 756.0], [4.7, 760.0], [4.8, 770.0], [4.9, 774.0], [5.0, 777.0], [5.1, 784.0], [5.2, 791.0], [5.3, 802.0], [5.4, 820.0], [5.5, 823.0], [5.6, 825.0], [5.7, 828.0], [5.8, 830.0], [5.9, 831.0], [6.0, 832.0], [6.1, 835.0], [6.2, 840.0], [6.3, 852.0], [6.4, 858.0], [6.5, 861.0], [6.6, 864.0], [6.7, 866.0], [6.8, 867.0], [6.9, 870.0], [7.0, 872.0], [7.1, 874.0], [7.2, 877.0], [7.3, 881.0], [7.4, 900.0], [7.5, 903.0], [7.6, 906.0], [7.7, 908.0], [7.8, 910.0], [7.9, 915.0], [8.0, 920.0], [8.1, 925.0], [8.2, 930.0], [8.3, 936.0], [8.4, 943.0], [8.5, 952.0], [8.6, 964.0], [8.7, 968.0], [8.8, 969.0], [8.9, 973.0], [9.0, 975.0], [9.1, 978.0], [9.2, 982.0], [9.3, 989.0], [9.4, 998.0], [9.5, 1002.0], [9.6, 1004.0], [9.7, 1006.0], [9.8, 1009.0], [9.9, 1011.0], [10.0, 1012.0], [10.1, 1014.0], [10.2, 1016.0], [10.3, 1017.0], [10.4, 1019.0], [10.5, 1021.0], [10.6, 1024.0], [10.7, 1029.0], [10.8, 1034.0], [10.9, 1044.0], [11.0, 1051.0], [11.1, 1057.0], [11.2, 1059.0], [11.3, 1062.0], [11.4, 1066.0], [11.5, 1069.0], [11.6, 1073.0], [11.7, 1075.0], [11.8, 1079.0], [11.9, 1082.0], [12.0, 1084.0], [12.1, 1087.0], [12.2, 1090.0], [12.3, 1094.0], [12.4, 1098.0], [12.5, 1100.0], [12.6, 1102.0], [12.7, 1104.0], [12.8, 1106.0], [12.9, 1110.0], [13.0, 1113.0], [13.1, 1114.0], [13.2, 1118.0], [13.3, 1120.0], [13.4, 1123.0], [13.5, 1125.0], [13.6, 1127.0], [13.7, 1129.0], [13.8, 1130.0], [13.9, 1132.0], [14.0, 1136.0], [14.1, 1138.0], [14.2, 1140.0], [14.3, 1142.0], [14.4, 1144.0], [14.5, 1145.0], [14.6, 1147.0], [14.7, 1149.0], [14.8, 1150.0], [14.9, 1152.0], [15.0, 1154.0], [15.1, 1157.0], [15.2, 1158.0], [15.3, 1160.0], [15.4, 1164.0], [15.5, 1167.0], [15.6, 1170.0], [15.7, 1172.0], [15.8, 1175.0], [15.9, 1177.0], [16.0, 1183.0], [16.1, 1186.0], [16.2, 1189.0], [16.3, 1194.0], [16.4, 1198.0], [16.5, 1203.0], [16.6, 1207.0], [16.7, 1209.0], [16.8, 1212.0], [16.9, 1214.0], [17.0, 1216.0], [17.1, 1217.0], [17.2, 1218.0], [17.3, 1219.0], [17.4, 1220.0], [17.5, 1221.0], [17.6, 1222.0], [17.7, 1223.0], [17.8, 1224.0], [17.9, 1225.0], [18.0, 1226.0], [18.1, 1227.0], [18.2, 1228.0], [18.3, 1229.0], [18.4, 1230.0], [18.5, 1230.0], [18.6, 1231.0], [18.7, 1232.0], [18.8, 1234.0], [18.9, 1235.0], [19.0, 1236.0], [19.1, 1237.0], [19.2, 1239.0], [19.3, 1241.0], [19.4, 1243.0], [19.5, 1245.0], [19.6, 1247.0], [19.7, 1250.0], [19.8, 1252.0], [19.9, 1255.0], [20.0, 1257.0], [20.1, 1259.0], [20.2, 1262.0], [20.3, 1264.0], [20.4, 1266.0], [20.5, 1268.0], [20.6, 1269.0], [20.7, 1270.0], [20.8, 1271.0], [20.9, 1273.0], [21.0, 1274.0], [21.1, 1275.0], [21.2, 1276.0], [21.3, 1278.0], [21.4, 1279.0], [21.5, 1281.0], [21.6, 1282.0], [21.7, 1284.0], [21.8, 1286.0], [21.9, 1287.0], [22.0, 1288.0], [22.1, 1290.0], [22.2, 1291.0], [22.3, 1292.0], [22.4, 1293.0], [22.5, 1294.0], [22.6, 1295.0], [22.7, 1296.0], [22.8, 1297.0], [22.9, 1298.0], [23.0, 1299.0], [23.1, 1301.0], [23.2, 1303.0], [23.3, 1304.0], [23.4, 1305.0], [23.5, 1306.0], [23.6, 1307.0], [23.7, 1308.0], [23.8, 1309.0], [23.9, 1309.0], [24.0, 1311.0], [24.1, 1312.0], [24.2, 1313.0], [24.3, 1314.0], [24.4, 1314.0], [24.5, 1315.0], [24.6, 1316.0], [24.7, 1318.0], [24.8, 1318.0], [24.9, 1319.0], [25.0, 1320.0], [25.1, 1321.0], [25.2, 1323.0], [25.3, 1324.0], [25.4, 1325.0], [25.5, 1326.0], [25.6, 1328.0], [25.7, 1329.0], [25.8, 1330.0], [25.9, 1332.0], [26.0, 1334.0], [26.1, 1335.0], [26.2, 1336.0], [26.3, 1337.0], [26.4, 1337.0], [26.5, 1338.0], [26.6, 1339.0], [26.7, 1340.0], [26.8, 1341.0], [26.9, 1342.0], [27.0, 1343.0], [27.1, 1344.0], [27.2, 1345.0], [27.3, 1346.0], [27.4, 1347.0], [27.5, 1348.0], [27.6, 1348.0], [27.7, 1348.0], [27.8, 1349.0], [27.9, 1350.0], [28.0, 1351.0], [28.1, 1351.0], [28.2, 1352.0], [28.3, 1354.0], [28.4, 1355.0], [28.5, 1355.0], [28.6, 1356.0], [28.7, 1357.0], [28.8, 1358.0], [28.9, 1359.0], [29.0, 1360.0], [29.1, 1361.0], [29.2, 1361.0], [29.3, 1362.0], [29.4, 1363.0], [29.5, 1364.0], [29.6, 1365.0], [29.7, 1366.0], [29.8, 1367.0], [29.9, 1369.0], [30.0, 1369.0], [30.1, 1371.0], [30.2, 1372.0], [30.3, 1373.0], [30.4, 1374.0], [30.5, 1374.0], [30.6, 1375.0], [30.7, 1376.0], [30.8, 1377.0], [30.9, 1378.0], [31.0, 1378.0], [31.1, 1379.0], [31.2, 1380.0], [31.3, 1381.0], [31.4, 1382.0], [31.5, 1383.0], [31.6, 1384.0], [31.7, 1385.0], [31.8, 1387.0], [31.9, 1388.0], [32.0, 1389.0], [32.1, 1390.0], [32.2, 1391.0], [32.3, 1393.0], [32.4, 1394.0], [32.5, 1395.0], [32.6, 1396.0], [32.7, 1397.0], [32.8, 1398.0], [32.9, 1399.0], [33.0, 1400.0], [33.1, 1401.0], [33.2, 1402.0], [33.3, 1404.0], [33.4, 1405.0], [33.5, 1407.0], [33.6, 1409.0], [33.7, 1411.0], [33.8, 1412.0], [33.9, 1414.0], [34.0, 1415.0], [34.1, 1416.0], [34.2, 1418.0], [34.3, 1419.0], [34.4, 1420.0], [34.5, 1423.0], [34.6, 1425.0], [34.7, 1426.0], [34.8, 1428.0], [34.9, 1429.0], [35.0, 1430.0], [35.1, 1432.0], [35.2, 1433.0], [35.3, 1434.0], [35.4, 1435.0], [35.5, 1436.0], [35.6, 1436.0], [35.7, 1437.0], [35.8, 1438.0], [35.9, 1439.0], [36.0, 1441.0], [36.1, 1442.0], [36.2, 1444.0], [36.3, 1445.0], [36.4, 1446.0], [36.5, 1447.0], [36.6, 1449.0], [36.7, 1450.0], [36.8, 1452.0], [36.9, 1453.0], [37.0, 1454.0], [37.1, 1455.0], [37.2, 1456.0], [37.3, 1458.0], [37.4, 1459.0], [37.5, 1461.0], [37.6, 1462.0], [37.7, 1464.0], [37.8, 1466.0], [37.9, 1467.0], [38.0, 1468.0], [38.1, 1469.0], [38.2, 1471.0], [38.3, 1472.0], [38.4, 1473.0], [38.5, 1475.0], [38.6, 1476.0], [38.7, 1477.0], [38.8, 1478.0], [38.9, 1479.0], [39.0, 1480.0], [39.1, 1481.0], [39.2, 1484.0], [39.3, 1485.0], [39.4, 1486.0], [39.5, 1487.0], [39.6, 1488.0], [39.7, 1489.0], [39.8, 1490.0], [39.9, 1490.0], [40.0, 1491.0], [40.1, 1492.0], [40.2, 1493.0], [40.3, 1493.0], [40.4, 1494.0], [40.5, 1494.0], [40.6, 1495.0], [40.7, 1495.0], [40.8, 1496.0], [40.9, 1497.0], [41.0, 1497.0], [41.1, 1498.0], [41.2, 1498.0], [41.3, 1499.0], [41.4, 1499.0], [41.5, 1500.0], [41.6, 1500.0], [41.7, 1501.0], [41.8, 1501.0], [41.9, 1502.0], [42.0, 1502.0], [42.1, 1503.0], [42.2, 1503.0], [42.3, 1504.0], [42.4, 1505.0], [42.5, 1505.0], [42.6, 1506.0], [42.7, 1506.0], [42.8, 1507.0], [42.9, 1507.0], [43.0, 1508.0], [43.1, 1508.0], [43.2, 1509.0], [43.3, 1509.0], [43.4, 1510.0], [43.5, 1511.0], [43.6, 1512.0], [43.7, 1512.0], [43.8, 1513.0], [43.9, 1514.0], [44.0, 1514.0], [44.1, 1515.0], [44.2, 1516.0], [44.3, 1517.0], [44.4, 1517.0], [44.5, 1518.0], [44.6, 1519.0], [44.7, 1519.0], [44.8, 1520.0], [44.9, 1521.0], [45.0, 1522.0], [45.1, 1522.0], [45.2, 1523.0], [45.3, 1524.0], [45.4, 1524.0], [45.5, 1525.0], [45.6, 1526.0], [45.7, 1526.0], [45.8, 1527.0], [45.9, 1527.0], [46.0, 1528.0], [46.1, 1529.0], [46.2, 1530.0], [46.3, 1531.0], [46.4, 1531.0], [46.5, 1532.0], [46.6, 1533.0], [46.7, 1533.0], [46.8, 1534.0], [46.9, 1535.0], [47.0, 1536.0], [47.1, 1537.0], [47.2, 1540.0], [47.3, 1541.0], [47.4, 1542.0], [47.5, 1542.0], [47.6, 1543.0], [47.7, 1545.0], [47.8, 1546.0], [47.9, 1547.0], [48.0, 1548.0], [48.1, 1550.0], [48.2, 1552.0], [48.3, 1554.0], [48.4, 1556.0], [48.5, 1558.0], [48.6, 1560.0], [48.7, 1561.0], [48.8, 1563.0], [48.9, 1564.0], [49.0, 1566.0], [49.1, 1567.0], [49.2, 1568.0], [49.3, 1569.0], [49.4, 1570.0], [49.5, 1570.0], [49.6, 1572.0], [49.7, 1572.0], [49.8, 1573.0], [49.9, 1573.0], [50.0, 1574.0], [50.1, 1574.0], [50.2, 1574.0], [50.3, 1575.0], [50.4, 1576.0], [50.5, 1577.0], [50.6, 1577.0], [50.7, 1578.0], [50.8, 1579.0], [50.9, 1579.0], [51.0, 1580.0], [51.1, 1581.0], [51.2, 1582.0], [51.3, 1582.0], [51.4, 1583.0], [51.5, 1584.0], [51.6, 1585.0], [51.7, 1585.0], [51.8, 1586.0], [51.9, 1587.0], [52.0, 1588.0], [52.1, 1589.0], [52.2, 1590.0], [52.3, 1591.0], [52.4, 1591.0], [52.5, 1592.0], [52.6, 1593.0], [52.7, 1594.0], [52.8, 1596.0], [52.9, 1597.0], [53.0, 1598.0], [53.1, 1600.0], [53.2, 1601.0], [53.3, 1604.0], [53.4, 1606.0], [53.5, 1608.0], [53.6, 1611.0], [53.7, 1614.0], [53.8, 1616.0], [53.9, 1619.0], [54.0, 1620.0], [54.1, 1622.0], [54.2, 1624.0], [54.3, 1624.0], [54.4, 1625.0], [54.5, 1627.0], [54.6, 1629.0], [54.7, 1630.0], [54.8, 1631.0], [54.9, 1633.0], [55.0, 1634.0], [55.1, 1635.0], [55.2, 1636.0], [55.3, 1637.0], [55.4, 1638.0], [55.5, 1640.0], [55.6, 1641.0], [55.7, 1643.0], [55.8, 1643.0], [55.9, 1644.0], [56.0, 1645.0], [56.1, 1645.0], [56.2, 1647.0], [56.3, 1648.0], [56.4, 1649.0], [56.5, 1650.0], [56.6, 1650.0], [56.7, 1651.0], [56.8, 1652.0], [56.9, 1653.0], [57.0, 1653.0], [57.1, 1654.0], [57.2, 1655.0], [57.3, 1656.0], [57.4, 1656.0], [57.5, 1657.0], [57.6, 1658.0], [57.7, 1658.0], [57.8, 1659.0], [57.9, 1659.0], [58.0, 1661.0], [58.1, 1661.0], [58.2, 1662.0], [58.3, 1663.0], [58.4, 1663.0], [58.5, 1664.0], [58.6, 1666.0], [58.7, 1667.0], [58.8, 1668.0], [58.9, 1669.0], [59.0, 1671.0], [59.1, 1672.0], [59.2, 1674.0], [59.3, 1675.0], [59.4, 1675.0], [59.5, 1677.0], [59.6, 1678.0], [59.7, 1680.0], [59.8, 1681.0], [59.9, 1682.0], [60.0, 1683.0], [60.1, 1684.0], [60.2, 1684.0], [60.3, 1686.0], [60.4, 1687.0], [60.5, 1687.0], [60.6, 1688.0], [60.7, 1689.0], [60.8, 1690.0], [60.9, 1691.0], [61.0, 1691.0], [61.1, 1692.0], [61.2, 1692.0], [61.3, 1693.0], [61.4, 1694.0], [61.5, 1694.0], [61.6, 1695.0], [61.7, 1696.0], [61.8, 1697.0], [61.9, 1697.0], [62.0, 1698.0], [62.1, 1699.0], [62.2, 1700.0], [62.3, 1701.0], [62.4, 1701.0], [62.5, 1702.0], [62.6, 1703.0], [62.7, 1703.0], [62.8, 1704.0], [62.9, 1705.0], [63.0, 1706.0], [63.1, 1707.0], [63.2, 1707.0], [63.3, 1708.0], [63.4, 1709.0], [63.5, 1709.0], [63.6, 1710.0], [63.7, 1711.0], [63.8, 1712.0], [63.9, 1712.0], [64.0, 1713.0], [64.1, 1714.0], [64.2, 1714.0], [64.3, 1715.0], [64.4, 1716.0], [64.5, 1717.0], [64.6, 1718.0], [64.7, 1719.0], [64.8, 1720.0], [64.9, 1721.0], [65.0, 1722.0], [65.1, 1724.0], [65.2, 1725.0], [65.3, 1727.0], [65.4, 1729.0], [65.5, 1730.0], [65.6, 1733.0], [65.7, 1734.0], [65.8, 1736.0], [65.9, 1739.0], [66.0, 1740.0], [66.1, 1742.0], [66.2, 1743.0], [66.3, 1744.0], [66.4, 1745.0], [66.5, 1746.0], [66.6, 1747.0], [66.7, 1747.0], [66.8, 1748.0], [66.9, 1749.0], [67.0, 1750.0], [67.1, 1751.0], [67.2, 1752.0], [67.3, 1753.0], [67.4, 1754.0], [67.5, 1755.0], [67.6, 1755.0], [67.7, 1756.0], [67.8, 1757.0], [67.9, 1758.0], [68.0, 1760.0], [68.1, 1761.0], [68.2, 1762.0], [68.3, 1763.0], [68.4, 1764.0], [68.5, 1765.0], [68.6, 1767.0], [68.7, 1769.0], [68.8, 1771.0], [68.9, 1772.0], [69.0, 1774.0], [69.1, 1777.0], [69.2, 1778.0], [69.3, 1780.0], [69.4, 1783.0], [69.5, 1785.0], [69.6, 1787.0], [69.7, 1790.0], [69.8, 1794.0], [69.9, 1795.0], [70.0, 1800.0], [70.1, 1804.0], [70.2, 1806.0], [70.3, 1807.0], [70.4, 1808.0], [70.5, 1810.0], [70.6, 1813.0], [70.7, 1816.0], [70.8, 1819.0], [70.9, 1820.0], [71.0, 1822.0], [71.1, 1823.0], [71.2, 1825.0], [71.3, 1826.0], [71.4, 1827.0], [71.5, 1828.0], [71.6, 1830.0], [71.7, 1831.0], [71.8, 1831.0], [71.9, 1832.0], [72.0, 1833.0], [72.1, 1835.0], [72.2, 1836.0], [72.3, 1838.0], [72.4, 1838.0], [72.5, 1839.0], [72.6, 1841.0], [72.7, 1842.0], [72.8, 1843.0], [72.9, 1844.0], [73.0, 1845.0], [73.1, 1847.0], [73.2, 1848.0], [73.3, 1849.0], [73.4, 1850.0], [73.5, 1851.0], [73.6, 1852.0], [73.7, 1853.0], [73.8, 1854.0], [73.9, 1855.0], [74.0, 1856.0], [74.1, 1857.0], [74.2, 1858.0], [74.3, 1859.0], [74.4, 1860.0], [74.5, 1861.0], [74.6, 1862.0], [74.7, 1863.0], [74.8, 1864.0], [74.9, 1865.0], [75.0, 1865.0], [75.1, 1866.0], [75.2, 1866.0], [75.3, 1868.0], [75.4, 1868.0], [75.5, 1869.0], [75.6, 1870.0], [75.7, 1871.0], [75.8, 1872.0], [75.9, 1873.0], [76.0, 1875.0], [76.1, 1876.0], [76.2, 1877.0], [76.3, 1878.0], [76.4, 1880.0], [76.5, 1882.0], [76.6, 1884.0], [76.7, 1885.0], [76.8, 1887.0], [76.9, 1889.0], [77.0, 1891.0], [77.1, 1892.0], [77.2, 1894.0], [77.3, 1896.0], [77.4, 1898.0], [77.5, 1899.0], [77.6, 1901.0], [77.7, 1902.0], [77.8, 1904.0], [77.9, 1905.0], [78.0, 1908.0], [78.1, 1909.0], [78.2, 1910.0], [78.3, 1912.0], [78.4, 1914.0], [78.5, 1917.0], [78.6, 1918.0], [78.7, 1921.0], [78.8, 1924.0], [78.9, 1927.0], [79.0, 1929.0], [79.1, 1933.0], [79.2, 1938.0], [79.3, 1942.0], [79.4, 1947.0], [79.5, 1948.0], [79.6, 1950.0], [79.7, 1953.0], [79.8, 1956.0], [79.9, 1961.0], [80.0, 1965.0], [80.1, 1968.0], [80.2, 1971.0], [80.3, 1974.0], [80.4, 1978.0], [80.5, 1981.0], [80.6, 1984.0], [80.7, 1986.0], [80.8, 1988.0], [80.9, 1990.0], [81.0, 1992.0], [81.1, 1995.0], [81.2, 1996.0], [81.3, 1999.0], [81.4, 2001.0], [81.5, 2004.0], [81.6, 2008.0], [81.7, 2011.0], [81.8, 2014.0], [81.9, 2017.0], [82.0, 2021.0], [82.1, 2023.0], [82.2, 2026.0], [82.3, 2029.0], [82.4, 2032.0], [82.5, 2034.0], [82.6, 2038.0], [82.7, 2040.0], [82.8, 2042.0], [82.9, 2044.0], [83.0, 2046.0], [83.1, 2049.0], [83.2, 2052.0], [83.3, 2057.0], [83.4, 2059.0], [83.5, 2059.0], [83.6, 2061.0], [83.7, 2062.0], [83.8, 2064.0], [83.9, 2066.0], [84.0, 2068.0], [84.1, 2069.0], [84.2, 2072.0], [84.3, 2074.0], [84.4, 2076.0], [84.5, 2078.0], [84.6, 2079.0], [84.7, 2081.0], [84.8, 2082.0], [84.9, 2084.0], [85.0, 2086.0], [85.1, 2087.0], [85.2, 2090.0], [85.3, 2091.0], [85.4, 2094.0], [85.5, 2099.0], [85.6, 2100.0], [85.7, 2102.0], [85.8, 2106.0], [85.9, 2109.0], [86.0, 2112.0], [86.1, 2114.0], [86.2, 2116.0], [86.3, 2118.0], [86.4, 2119.0], [86.5, 2121.0], [86.6, 2124.0], [86.7, 2125.0], [86.8, 2127.0], [86.9, 2129.0], [87.0, 2132.0], [87.1, 2134.0], [87.2, 2138.0], [87.3, 2140.0], [87.4, 2143.0], [87.5, 2147.0], [87.6, 2149.0], [87.7, 2154.0], [87.8, 2158.0], [87.9, 2163.0], [88.0, 2168.0], [88.1, 2174.0], [88.2, 2180.0], [88.3, 2184.0], [88.4, 2187.0], [88.5, 2192.0], [88.6, 2194.0], [88.7, 2196.0], [88.8, 2200.0], [88.9, 2203.0], [89.0, 2207.0], [89.1, 2210.0], [89.2, 2212.0], [89.3, 2218.0], [89.4, 2224.0], [89.5, 2228.0], [89.6, 2233.0], [89.7, 2234.0], [89.8, 2237.0], [89.9, 2241.0], [90.0, 2244.0], [90.1, 2247.0], [90.2, 2250.0], [90.3, 2255.0], [90.4, 2259.0], [90.5, 2265.0], [90.6, 2272.0], [90.7, 2276.0], [90.8, 2280.0], [90.9, 2285.0], [91.0, 2289.0], [91.1, 2292.0], [91.2, 2299.0], [91.3, 2304.0], [91.4, 2314.0], [91.5, 2321.0], [91.6, 2326.0], [91.7, 2332.0], [91.8, 2339.0], [91.9, 2346.0], [92.0, 2352.0], [92.1, 2358.0], [92.2, 2365.0], [92.3, 2369.0], [92.4, 2374.0], [92.5, 2377.0], [92.6, 2386.0], [92.7, 2391.0], [92.8, 2397.0], [92.9, 2403.0], [93.0, 2408.0], [93.1, 2415.0], [93.2, 2419.0], [93.3, 2429.0], [93.4, 2438.0], [93.5, 2450.0], [93.6, 2461.0], [93.7, 2472.0], [93.8, 2486.0], [93.9, 2495.0], [94.0, 2505.0], [94.1, 2510.0], [94.2, 2516.0], [94.3, 2522.0], [94.4, 2528.0], [94.5, 2538.0], [94.6, 2542.0], [94.7, 2552.0], [94.8, 2577.0], [94.9, 2591.0], [95.0, 2606.0], [95.1, 2610.0], [95.2, 2618.0], [95.3, 2626.0], [95.4, 2636.0], [95.5, 2651.0], [95.6, 2681.0], [95.7, 2703.0], [95.8, 2720.0], [95.9, 2735.0], [96.0, 2748.0], [96.1, 2797.0], [96.2, 2856.0], [96.3, 2901.0], [96.4, 2922.0], [96.5, 2953.0], [96.6, 2988.0], [96.7, 3036.0], [96.8, 3092.0], [96.9, 3115.0], [97.0, 3198.0], [97.1, 3232.0], [97.2, 3272.0], [97.3, 3295.0], [97.4, 3311.0], [97.5, 3353.0], [97.6, 3373.0], [97.7, 3412.0], [97.8, 3432.0], [97.9, 3450.0], [98.0, 3464.0], [98.1, 3479.0], [98.2, 3486.0], [98.3, 3505.0], [98.4, 3512.0], [98.5, 3524.0], [98.6, 3550.0], [98.7, 3626.0], [98.8, 3654.0], [98.9, 3680.0], [99.0, 3695.0], [99.1, 3711.0], [99.2, 3723.0], [99.3, 3740.0], [99.4, 3823.0], [99.5, 3896.0], [99.6, 4049.0], [99.7, 4124.0], [99.8, 4245.0], [99.9, 4285.0], [100.0, 4787.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 1163.0, "series": [{"data": [[600.0, 222.0], [700.0, 158.0], [800.0, 213.0], [900.0, 203.0], [1000.0, 303.0], [1100.0, 397.0], [1200.0, 658.0], [1300.0, 998.0], [1400.0, 847.0], [1500.0, 1163.0], [1600.0, 907.0], [1700.0, 784.0], [1800.0, 751.0], [1900.0, 382.0], [2000.0, 423.0], [2100.0, 323.0], [2200.0, 242.0], [2300.0, 163.0], [2400.0, 111.0], [2500.0, 99.0], [2600.0, 72.0], [2800.0, 18.0], [2700.0, 44.0], [2900.0, 32.0], [3000.0, 21.0], [3100.0, 20.0], [3200.0, 29.0], [3300.0, 38.0], [3400.0, 60.0], [3500.0, 38.0], [3600.0, 36.0], [3700.0, 35.0], [3800.0, 13.0], [3900.0, 7.0], [4000.0, 7.0], [4100.0, 11.0], [4200.0, 17.0], [4300.0, 2.0], [4400.0, 4.0], [4600.0, 1.0], [4700.0, 1.0], [400.0, 11.0], [500.0, 136.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5760.0, "series": [{"data": [[0.0, 10.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3976.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5760.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 254.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1386.623199999999, "minX": 1.73403444E12, "maxY": 1386.623199999999, "series": [{"data": [[1.73403444E12, 1386.623199999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403444E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 480.0, "minX": 2.0, "maxY": 2341.285714285714, "series": [{"data": [[2.0, 776.0], [3.0, 638.0], [5.0, 852.0], [6.0, 636.0], [8.0, 623.5], [10.0, 549.0], [11.0, 721.0], [12.0, 1227.0], [13.0, 723.0], [14.0, 561.0], [16.0, 554.0], [17.0, 563.0], [18.0, 724.0], [19.0, 565.0], [20.0, 724.0], [22.0, 718.5], [23.0, 562.0], [24.0, 571.0], [26.0, 644.5], [27.0, 572.0], [28.0, 568.0], [29.0, 724.0], [31.0, 717.5], [33.0, 578.0], [32.0, 579.0], [34.0, 731.0], [37.0, 887.0], [36.0, 656.5], [39.0, 567.0], [38.0, 579.0], [41.0, 570.0], [42.0, 580.0], [44.0, 583.0], [46.0, 632.0], [49.0, 583.0], [48.0, 584.0], [51.0, 1090.0], [50.0, 730.0], [53.0, 902.0], [52.0, 731.0], [55.0, 588.0], [54.0, 894.0], [57.0, 596.0], [56.0, 597.0], [59.0, 592.0], [61.0, 588.0], [60.0, 735.0], [63.0, 905.0], [62.0, 585.0], [65.0, 597.5], [69.0, 740.0], [68.0, 863.3333333333334], [75.0, 597.0], [73.0, 741.0], [72.0, 596.0], [78.0, 603.0], [76.0, 741.0], [83.0, 909.0], [82.0, 603.0], [81.0, 737.0], [80.0, 605.5], [87.0, 608.5], [85.0, 1103.0], [84.0, 742.0], [91.0, 607.0], [90.0, 607.3333333333334], [95.0, 884.0], [92.0, 614.0], [98.0, 611.5], [96.0, 607.0], [103.0, 763.5], [101.0, 611.0], [100.0, 683.0], [106.0, 615.0], [104.0, 766.0], [111.0, 618.5], [109.0, 837.5], [108.0, 618.0], [115.0, 851.0], [113.0, 877.5], [119.0, 669.0], [118.0, 621.0], [122.0, 933.0], [120.0, 617.0], [127.0, 623.0], [126.0, 773.0], [125.0, 661.25], [135.0, 1142.0], [134.0, 679.6666666666666], [132.0, 632.0], [130.0, 619.5], [128.0, 621.0], [143.0, 639.0], [142.0, 633.0], [141.0, 637.0], [140.0, 633.5], [138.0, 771.0], [137.0, 632.0], [136.0, 770.0], [151.0, 635.0], [150.0, 633.0], [149.0, 809.5], [147.0, 638.0], [146.0, 879.0], [144.0, 635.0], [158.0, 634.5], [156.0, 635.6666666666666], [153.0, 776.0], [152.0, 639.0], [167.0, 779.0], [166.0, 689.3333333333334], [163.0, 709.0], [161.0, 634.0], [160.0, 878.5], [174.0, 649.0], [173.0, 657.0], [172.0, 776.0], [171.0, 651.0], [169.0, 652.0], [168.0, 641.0], [183.0, 489.0], [182.0, 651.0], [181.0, 651.0], [180.0, 653.0], [179.0, 651.0], [177.0, 795.0], [176.0, 654.0], [191.0, 657.0], [190.0, 652.0], [188.0, 780.0], [187.0, 658.0], [186.0, 660.0], [185.0, 791.0], [184.0, 658.0], [199.0, 1002.0], [198.0, 480.0], [197.0, 495.5], [196.0, 496.0], [194.0, 1158.0], [193.0, 497.0], [192.0, 907.5], [207.0, 512.0], [206.0, 499.0], [205.0, 660.0], [204.0, 665.3333333333334], [201.0, 657.0], [200.0, 489.0], [215.0, 664.0], [214.0, 659.0], [212.0, 823.0], [211.0, 498.0], [210.0, 659.0], [209.0, 655.0], [208.0, 658.0], [223.0, 658.0], [222.0, 1000.0], [221.0, 830.0], [220.0, 823.0], [219.0, 1163.0], [218.0, 664.5], [216.0, 663.0], [231.0, 513.0], [230.0, 659.0], [229.0, 1196.0], [228.0, 511.0], [227.0, 507.0], [226.0, 1024.0], [225.0, 661.0], [224.0, 516.0], [239.0, 512.0], [238.0, 520.0], [237.0, 513.0], [236.0, 828.0], [235.0, 667.0], [234.0, 746.0], [232.0, 665.0], [247.0, 1019.0], [246.0, 528.0], [245.0, 666.0], [244.0, 528.0], [243.0, 668.0], [242.0, 589.5], [240.0, 823.0], [254.0, 752.5], [252.0, 597.0], [250.0, 1094.0], [248.0, 1020.0], [271.0, 668.5], [269.0, 941.5], [267.0, 676.0], [266.0, 1219.0], [265.0, 537.0], [264.0, 533.5], [262.0, 574.3333333333334], [259.0, 598.5], [258.0, 672.0], [256.0, 670.5], [286.0, 679.0], [287.0, 840.0], [285.0, 836.0], [284.0, 615.0], [283.0, 545.0], [281.0, 543.0], [280.0, 1046.0], [279.0, 753.5], [275.0, 837.0], [274.0, 538.5], [272.0, 673.0], [277.0, 673.0], [291.0, 852.0], [301.0, 701.0], [300.0, 681.0], [299.0, 617.0], [297.0, 690.0], [296.0, 591.3333333333334], [294.0, 545.0], [292.0, 1063.0], [290.0, 689.0], [288.0, 1396.0], [318.0, 1445.0], [319.0, 856.0], [317.0, 545.0], [316.0, 553.0], [315.0, 985.0], [313.0, 859.0], [312.0, 699.0], [311.0, 700.0], [305.0, 695.0], [304.0, 696.6666666666666], [307.0, 548.0], [306.0, 548.0], [310.0, 547.0], [309.0, 695.0], [308.0, 548.0], [334.0, 734.0], [335.0, 562.0], [332.0, 703.0], [323.0, 910.0], [322.0, 733.5], [320.0, 697.0], [331.0, 815.0], [329.0, 706.0], [328.0, 548.0], [327.0, 563.0], [326.0, 703.0], [324.0, 696.0], [350.0, 563.0], [351.0, 565.0], [349.0, 698.0], [348.0, 1271.5], [346.0, 704.0], [345.0, 701.0], [344.0, 739.5], [342.0, 804.0], [339.0, 563.0], [338.0, 701.5], [336.0, 559.0], [340.0, 907.0], [366.0, 808.5], [367.0, 1085.0], [364.0, 843.0], [362.0, 908.0], [360.0, 633.0], [358.0, 905.0], [357.0, 703.0], [356.0, 637.5], [354.0, 896.0], [352.0, 705.0], [381.0, 747.0], [382.0, 735.0], [380.0, 1084.0], [378.0, 577.0], [377.0, 711.0], [376.0, 1004.0], [374.0, 702.0], [373.0, 655.5], [371.0, 581.0], [370.0, 701.0], [369.0, 915.0], [368.0, 910.0], [397.0, 582.0], [399.0, 663.5], [396.0, 741.0], [387.0, 585.0], [385.0, 582.0], [384.0, 585.0], [395.0, 659.0], [393.0, 741.0], [392.0, 583.0], [391.0, 745.0], [390.0, 666.5], [388.0, 899.0], [403.0, 586.0], [415.0, 763.0], [414.0, 763.0], [411.0, 586.0], [410.0, 765.5], [408.0, 594.0], [407.0, 588.0], [406.0, 580.0], [405.0, 842.0], [402.0, 587.0], [401.0, 743.0], [400.0, 585.0], [429.0, 753.0], [427.0, 963.0], [426.0, 688.8], [423.0, 586.0], [420.0, 750.0], [419.0, 763.5], [418.0, 593.0], [417.0, 1100.0], [446.0, 1119.0], [447.0, 594.0], [445.0, 943.0], [444.0, 951.0], [443.0, 770.0], [441.0, 591.0], [440.0, 760.6666666666666], [437.0, 671.5], [434.0, 590.0], [433.0, 875.6666666666666], [432.0, 850.5], [436.0, 756.0], [461.0, 702.0], [462.0, 596.0], [460.0, 753.0], [457.0, 942.5], [455.0, 1295.0], [454.0, 754.0], [453.0, 753.0], [452.0, 754.0], [451.0, 1029.5], [449.0, 940.5], [477.0, 766.0], [476.0, 602.0], [475.0, 614.0], [474.0, 984.0], [473.0, 651.6666666666666], [472.0, 598.0], [470.0, 755.0], [468.0, 603.0], [467.0, 596.0], [466.0, 601.0], [464.0, 863.5], [483.0, 607.0], [493.0, 980.0], [495.0, 620.0], [492.0, 610.0], [491.0, 619.0], [488.0, 766.0], [487.0, 983.0], [486.0, 776.5], [484.0, 778.0], [482.0, 1138.0], [481.0, 644.0], [510.0, 994.0], [511.0, 834.0], [509.0, 882.5], [507.0, 848.0], [505.0, 619.0], [503.0, 805.5], [501.0, 777.0], [500.0, 792.6666666666666], [497.0, 620.0], [496.0, 879.0], [542.0, 885.0], [543.0, 833.0], [540.0, 831.0], [538.0, 1385.0], [537.0, 833.0], [519.0, 731.0], [517.0, 991.0], [515.0, 807.0], [513.0, 618.0], [512.0, 991.0], [525.0, 622.0], [524.0, 914.5], [522.0, 832.0], [521.0, 729.0], [535.0, 725.0], [533.0, 850.25], [529.0, 629.0], [528.0, 751.3333333333334], [568.0, 819.0], [574.0, 744.5], [575.0, 1010.0], [560.0, 662.0], [571.0, 1012.0], [570.0, 863.0], [569.0, 1011.0], [559.0, 650.0], [545.0, 923.5], [547.0, 632.0], [546.0, 625.0], [550.0, 628.0], [549.0, 835.0], [558.0, 835.5], [556.0, 625.0], [555.0, 624.0], [554.0, 628.0], [553.0, 844.0], [552.0, 730.5], [566.0, 839.0], [565.0, 636.5], [563.0, 840.5], [561.0, 643.0], [605.0, 680.0], [607.0, 775.0], [593.0, 934.5], [596.0, 873.0], [594.0, 678.0], [604.0, 876.0], [603.0, 867.0], [602.0, 869.0], [601.0, 771.0], [600.0, 678.5], [583.0, 836.5], [581.0, 858.75], [577.0, 857.0], [576.0, 912.0], [591.0, 666.0], [590.0, 735.0], [588.0, 871.0], [586.0, 936.5], [584.0, 659.0], [598.0, 675.0], [597.0, 678.0], [626.0, 775.5], [637.0, 1222.0], [638.0, 779.0], [624.0, 688.0], [636.0, 1051.0], [634.0, 684.0], [633.0, 779.5], [614.0, 682.0], [612.0, 874.0], [611.0, 817.25], [623.0, 1209.0], [622.0, 871.0], [621.0, 848.5], [619.0, 678.0], [618.0, 863.0], [616.0, 682.0], [631.0, 680.0], [629.0, 1036.5], [628.0, 1044.0], [665.0, 902.0], [669.0, 1057.0], [670.0, 901.0], [658.0, 902.0], [657.0, 864.0], [660.0, 676.0], [659.0, 676.0], [668.0, 674.0], [667.0, 694.0], [666.0, 1243.0], [664.0, 1054.0], [647.0, 881.0], [646.0, 680.0], [645.0, 813.0], [642.0, 681.0], [641.0, 683.0], [640.0, 957.5], [655.0, 909.0], [654.0, 1237.0], [653.0, 1241.0], [652.0, 1107.25], [649.0, 907.0], [663.0, 904.0], [662.0, 682.0], [701.0, 750.0], [702.0, 910.0], [689.0, 1054.0], [688.0, 878.0], [692.0, 700.0], [691.0, 801.0], [700.0, 1444.0], [699.0, 746.0], [698.0, 910.0], [697.0, 744.0], [696.0, 743.0], [679.0, 685.0], [678.0, 903.0], [677.0, 686.0], [675.0, 905.0], [674.0, 800.0], [672.0, 979.5], [686.0, 900.0], [685.0, 806.0], [683.0, 979.0], [681.0, 685.5], [695.0, 1054.0], [694.0, 903.0], [722.0, 901.0], [735.0, 906.5], [733.0, 906.5], [731.0, 966.75], [711.0, 917.0], [710.0, 1293.0], [709.0, 911.0], [708.0, 833.0], [706.0, 749.0], [705.0, 746.0], [727.0, 837.0], [725.0, 986.5], [724.0, 746.0], [720.0, 920.0], [719.0, 905.5], [718.0, 910.0], [716.0, 838.5], [714.0, 1057.0], [713.0, 744.0], [712.0, 1058.0], [760.0, 764.0], [764.0, 756.0], [767.0, 770.0], [753.0, 846.5], [755.0, 772.0], [754.0, 763.5], [766.0, 1324.0], [765.0, 1075.0], [763.0, 758.0], [762.0, 929.0], [761.0, 769.0], [750.0, 755.0], [736.0, 1477.0], [739.0, 929.0], [738.0, 1304.0], [741.0, 931.0], [740.0, 752.0], [749.0, 930.0], [748.0, 931.0], [747.0, 1071.0], [746.0, 928.0], [744.0, 920.3333333333334], [758.0, 760.0], [756.0, 931.0], [797.0, 790.5], [798.0, 1111.0], [785.0, 930.0], [784.0, 854.0], [795.0, 936.0], [794.0, 1535.0], [793.0, 1687.0], [792.0, 1495.0], [782.0, 1320.0], [768.0, 926.0], [772.0, 977.3333333333334], [769.0, 1076.0], [775.0, 775.0], [773.0, 928.0], [781.0, 777.0], [780.0, 1164.3333333333333], [779.0, 935.0], [778.0, 1092.0], [791.0, 788.0], [790.0, 941.0], [789.0, 940.0], [787.0, 943.5], [829.0, 974.0], [830.0, 802.0], [817.0, 795.0], [816.0, 965.0], [828.0, 804.0], [827.0, 971.5], [825.0, 968.0], [824.0, 792.0], [815.0, 1112.0], [800.0, 789.0], [803.0, 962.0], [801.0, 790.0], [806.0, 791.0], [805.0, 1115.0], [814.0, 1148.0], [812.0, 795.3333333333334], [809.0, 959.0], [808.0, 1356.5], [822.0, 1057.5], [820.0, 1328.0], [819.0, 1131.0], [818.0, 791.0], [861.0, 899.5], [851.0, 825.0], [863.0, 900.0], [848.0, 1161.0], [850.0, 824.0], [849.0, 825.0], [860.0, 903.0], [859.0, 822.0], [856.0, 831.0], [837.0, 1161.0], [835.0, 800.0], [834.0, 976.5], [832.0, 881.5], [847.0, 976.0], [846.0, 828.0], [845.0, 828.0], [843.0, 976.0], [842.0, 1330.0], [841.0, 988.75], [855.0, 1073.5], [853.0, 809.0], [852.0, 1346.0], [888.0, 823.0], [893.0, 1208.0], [895.0, 969.5], [881.0, 821.0], [892.0, 1208.5], [890.0, 819.0], [889.0, 1009.0], [878.0, 1260.5], [866.0, 981.0], [865.0, 905.0], [869.0, 1157.0], [868.0, 1160.0], [871.0, 822.0], [870.0, 1074.5], [876.0, 822.0], [875.0, 820.0], [874.0, 969.0], [873.0, 979.0], [872.0, 1168.0], [886.0, 969.0], [885.0, 895.5], [883.0, 969.0], [882.0, 1044.3333333333333], [925.0, 980.0], [927.0, 886.6666666666666], [914.0, 900.5], [912.0, 824.5], [923.0, 832.0], [922.0, 834.0], [921.0, 977.0], [920.0, 1383.0], [910.0, 1205.0], [896.0, 829.0], [898.0, 1206.0], [897.0, 967.0], [903.0, 1083.0], [901.0, 950.0], [909.0, 1206.0], [908.0, 1000.3333333333334], [905.0, 828.0], [904.0, 973.0], [919.0, 834.0], [918.0, 836.0], [917.0, 836.0], [916.0, 1215.0], [956.0, 902.5], [947.0, 830.0], [959.0, 1015.6666666666666], [944.0, 975.0], [946.0, 973.0], [945.0, 973.0], [954.0, 1226.0], [953.0, 831.0], [952.0, 975.0], [935.0, 969.0], [934.0, 1101.5], [932.0, 1216.0], [931.0, 975.0], [930.0, 1214.0], [929.0, 831.5], [943.0, 1135.0], [940.0, 833.0], [939.0, 978.0], [938.0, 1398.3333333333333], [951.0, 973.0], [950.0, 831.0], [949.0, 1098.5], [989.0, 856.0], [990.0, 1222.0], [976.0, 917.5], [988.0, 826.0], [987.0, 1005.0], [986.0, 930.0], [984.0, 923.0], [975.0, 1027.5], [962.0, 824.0], [960.0, 982.0], [964.0, 1222.0], [963.0, 827.0], [967.0, 825.0], [965.0, 996.0], [972.0, 1217.0], [971.0, 1124.0], [969.0, 993.0], [968.0, 1002.0], [982.0, 1003.0], [981.0, 1109.0], [980.0, 819.0], [978.0, 914.0], [1016.0, 793.5], [1021.0, 1016.0], [1007.0, 938.5], [993.0, 1224.0], [992.0, 917.0], [995.0, 1015.0], [994.0, 854.0], [997.0, 852.0], [996.0, 1433.0], [999.0, 867.0], [998.0, 852.0], [1005.0, 1012.0], [1004.0, 948.5], [1002.0, 1442.0], [1022.0, 1027.0], [1010.0, 1017.0], [1009.0, 1020.0], [1020.0, 1038.0], [1019.0, 863.0], [1017.0, 862.5], [1015.0, 863.0], [1014.0, 1038.0], [1013.0, 1121.0], [1012.0, 1220.0], [1078.0, 1096.0], [1082.0, 871.5], [1058.0, 1228.0], [1064.0, 963.5], [1068.0, 871.0], [1066.0, 1062.0], [1070.0, 1102.0], [1084.0, 870.5], [1080.0, 1282.5], [1074.0, 1097.0], [1072.0, 1180.0], [1024.0, 1160.5], [1028.0, 1222.0], [1032.0, 863.0], [1030.0, 951.0], [1036.0, 1043.5], [1038.0, 860.0], [1054.0, 868.0], [1042.0, 1050.0], [1040.0, 865.0], [1136.0, 877.0], [1142.0, 876.5], [1124.0, 1120.0], [1122.0, 1116.0], [1130.0, 873.0], [1132.0, 1286.0], [1148.0, 880.0], [1146.0, 1128.0], [1144.0, 1210.5], [1140.0, 878.0], [1100.0, 867.0], [1098.0, 877.0], [1096.0, 865.0], [1094.0, 1114.0], [1092.0, 1106.0], [1090.0, 1110.0], [1088.0, 1185.5], [1118.0, 1116.0], [1116.0, 873.0], [1114.0, 866.0], [1112.0, 1283.0], [1110.0, 874.0], [1108.0, 882.0], [1106.0, 1469.0], [1104.0, 1081.6666666666667], [1206.0, 1342.0], [1208.0, 1212.1666666666667], [1210.0, 1355.0], [1214.0, 1285.8888888888887], [1184.0, 1142.0], [1186.0, 1060.6666666666667], [1188.0, 1250.3333333333335], [1194.0, 1129.0], [1190.0, 1276.6666666666667], [1196.0, 1263.0], [1198.0, 1388.5], [1212.0, 1393.2222222222222], [1204.0, 1251.5], [1202.0, 1212.6], [1200.0, 1381.3333333333333], [1156.0, 1014.0], [1158.0, 1295.0], [1162.0, 1101.5], [1166.0, 976.6666666666666], [1180.0, 1337.0], [1178.0, 1124.0], [1176.0, 1016.5], [1174.0, 899.0], [1172.0, 915.0], [1168.0, 908.0], [1272.0, 1231.625], [1276.0, 1295.4], [1248.0, 1204.75], [1278.0, 1252.3846153846152], [1250.0, 1162.5], [1256.0, 1514.526315789474], [1254.0, 1559.8333333333333], [1252.0, 1358.0], [1258.0, 1276.1666666666667], [1260.0, 1480.3636363636363], [1274.0, 1119.0], [1270.0, 1326.4444444444443], [1268.0, 1386.5], [1266.0, 1249.6666666666667], [1264.0, 1353.0833333333333], [1230.0, 1258.5], [1226.0, 1222.75], [1224.0, 1384.5], [1222.0, 1346.0], [1220.0, 1252.1666666666667], [1218.0, 1328.4], [1216.0, 1183.0], [1228.0, 1376.0], [1244.0, 1123.0], [1242.0, 1060.5], [1240.0, 1160.6666666666667], [1236.0, 1376.0], [1234.0, 1155.0], [1232.0, 1095.0], [1238.0, 1127.0], [1262.0, 1338.0], [1282.0, 1271.2666666666664], [1280.0, 1304.6428571428573], [1310.0, 1392.2857142857142], [1308.0, 1387.0], [1306.0, 1249.8], [1304.0, 1332.1538461538462], [1302.0, 1384.611111111111], [1298.0, 1185.0000000000002], [1300.0, 1451.2], [1284.0, 1256.3076923076924], [1286.0, 1256.6923076923076], [1288.0, 1217.0000000000002], [1290.0, 1229.9285714285713], [1292.0, 1327.6666666666665], [1294.0, 1461.72], [1296.0, 1395.5000000000002], [1328.0, 1901.0], [1330.0, 2076.0], [1332.0, 1729.3333333333333], [1336.0, 1843.0], [1342.0, 1698.8333333333333], [1340.0, 1731.0], [1338.0, 1833.0], [1334.0, 1771.0], [1312.0, 1452.75], [1314.0, 1351.5], [1324.0, 1405.0], [1322.0, 1278.3333333333333], [1320.0, 1355.8181818181818], [1318.0, 1164.2], [1316.0, 1338.0], [1326.0, 2059.0], [1354.0, 1684.0], [1394.0, 1646.4374999999998], [1348.0, 1862.8333333333333], [1346.0, 1815.75], [1344.0, 1871.8333333333333], [1362.0, 1373.894736842105], [1360.0, 1405.625], [1364.0, 1410.6315789473683], [1366.0, 1318.8387096774197], [1368.0, 1550.3478260869565], [1370.0, 1671.6666666666663], [1372.0, 1569.0434782608695], [1374.0, 1520.3600000000001], [1350.0, 1676.0], [1356.0, 1344.0], [1358.0, 1521.0], [1392.0, 1680.7619047619048], [1396.0, 1778.5], [1402.0, 1769.8571428571427], [1400.0, 1283.0], [1404.0, 1816.625], [1406.0, 2152.0], [1398.0, 1779.0], [1376.0, 1516.1250000000002], [1378.0, 1357.6206896551726], [1380.0, 1364.9411764705883], [1382.0, 1524.1666666666663], [1384.0, 1691.6], [1388.0, 1486.7777777777778], [1386.0, 1539.6666666666667], [1390.0, 1573.8947368421052], [1412.0, 2135.0], [1408.0, 1933.5], [1436.0, 1556.0666666666666], [1434.0, 1589.2], [1438.0, 1720.5], [1430.0, 1538.5], [1432.0, 1602.6000000000001], [1428.0, 1936.6363636363637], [1410.0, 2245.8571428571427], [1414.0, 1278.0], [1416.0, 1273.5], [1418.0, 1592.0], [1420.0, 1394.2], [1422.0, 1717.6666666666665], [1456.0, 2011.0], [1448.0, 1778.842105263158], [1446.0, 2244.3571428571427], [1444.0, 1826.8000000000002], [1442.0, 1791.4285714285713], [1440.0, 1525.5555555555557], [1470.0, 1657.6], [1468.0, 2027.5555555555557], [1466.0, 1581.333333333333], [1464.0, 1477.25], [1462.0, 1530.826086956522], [1460.0, 1470.375], [1458.0, 1668.25], [1450.0, 1632.5333333333333], [1452.0, 1591.6923076923076], [1454.0, 1953.4999999999998], [1424.0, 1908.4285714285716], [1426.0, 2082.636363636364], [1478.0, 1875.8333333333333], [1472.0, 1690.3913043478262], [1476.0, 2074.083333333333], [1474.0, 2038.4999999999998], [1496.0, 1873.1999999999998], [1494.0, 1626.875], [1492.0, 1645.272727272727], [1490.0, 1754.5714285714284], [1498.0, 1818.9411764705878], [1500.0, 1752.2962962962963], [1502.0, 1525.0303030303032], [1488.0, 1665.9499999999998], [1484.0, 1813.0000000000002], [1482.0, 1462.4166666666667], [1480.0, 1538.7777777777778], [1486.0, 1581.4545454545453], [1520.0, 1801.8095238095232], [1522.0, 1976.4897959183668], [1524.0, 1942.4339622641508], [1528.0, 2046.0], [1532.0, 2157.3620689655177], [1530.0, 1813.6046511627908], [1534.0, 2106.3191489361698], [1526.0, 2243.956521739131], [1504.0, 1664.51724137931], [1506.0, 1846.3636363636365], [1508.0, 1751.104166666667], [1510.0, 1694.825], [1512.0, 1691.64], [1516.0, 1992.6333333333334], [1514.0, 1810.1944444444437], [1518.0, 1894.8867924528306], [1540.0, 1991.2647058823532], [1548.0, 1692.0624999999998], [1536.0, 2245.3399999999997], [1566.0, 1773.811594202898], [1564.0, 1835.9024390243903], [1562.0, 1772.9339622641503], [1560.0, 1746.4795918367347], [1552.0, 1689.7586206896551], [1554.0, 1970.7021276595747], [1556.0, 1867.8103448275858], [1558.0, 1711.1168831168832], [1538.0, 2125.170731707317], [1542.0, 1875.7200000000003], [1544.0, 1891.9736842105272], [1546.0, 1921.4444444444441], [1550.0, 1696.3414634146343], [1584.0, 1769.0645161290322], [1586.0, 1856.5833333333337], [1588.0, 1767.791666666667], [1590.0, 1733.7307692307693], [1594.0, 1801.978260869565], [1596.0, 1844.8030303030298], [1598.0, 1901.833333333333], [1592.0, 1803.9444444444443], [1568.0, 1836.1704545454547], [1580.0, 1851.5483870967744], [1582.0, 1829.3541666666667], [1578.0, 1871.0], [1576.0, 1742.055555555556], [1574.0, 1854.4430379746836], [1572.0, 1838.0], [1570.0, 1862.1746031746036], [1602.0, 1987.2599999999995], [1604.0, 1929.5416666666665], [1610.0, 2080.931034482758], [1606.0, 1852.6875], [1600.0, 1783.7812499999998], [1622.0, 1798.5], [1624.0, 1925.3333333333333], [1630.0, 1928.8750000000002], [1620.0, 2053.055555555555], [1608.0, 1794.4347826086955], [1612.0, 1976.4444444444446], [1614.0, 1884.72], [1632.0, 1548.0], [1618.0, 2153.8999999999996], [1616.0, 1912.8666666666663], [1075.0, 987.5], [1087.0, 1107.0], [1057.0, 1045.5], [1061.0, 870.5], [1059.0, 1241.0], [1063.0, 1232.0], [1069.0, 869.0], [1085.0, 1668.0], [1077.0, 1269.5], [1055.0, 1238.0], [1025.0, 864.0], [1031.0, 1155.5], [1033.0, 1048.0], [1037.0, 956.0], [1053.0, 1109.6666666666667], [1051.0, 1058.0], [1049.0, 1050.0], [1047.0, 1232.0], [1045.0, 1048.0], [1043.0, 871.0], [1041.0, 863.0], [1147.0, 1127.0], [1151.0, 1213.0], [1121.0, 1081.5], [1123.0, 1481.0], [1127.0, 958.6666666666666], [1129.0, 875.5], [1131.0, 1291.0], [1135.0, 1206.0], [1133.0, 1122.0], [1149.0, 1126.0], [1145.0, 1127.0], [1139.0, 1242.0], [1103.0, 1121.0], [1099.0, 1119.0], [1097.0, 869.0], [1095.0, 1118.0], [1093.0, 867.0], [1091.0, 864.0], [1089.0, 866.0], [1119.0, 878.0], [1117.0, 1177.0], [1115.0, 1265.0], [1113.0, 878.0], [1109.0, 875.0], [1107.0, 876.0], [1105.0, 1108.0], [1211.0, 924.0], [1213.0, 1450.875], [1215.0, 1411.0], [1185.0, 1397.0], [1187.0, 1520.0], [1189.0, 1181.6], [1191.0, 1134.0], [1193.0, 912.5], [1197.0, 1548.0], [1195.0, 1251.1666666666667], [1199.0, 1432.375], [1209.0, 1363.7142857142856], [1207.0, 1320.6363636363637], [1205.0, 1166.75], [1203.0, 1341.3333333333333], [1201.0, 1293.0], [1183.0, 1256.6666666666667], [1153.0, 1182.5], [1155.0, 1125.0], [1157.0, 1691.0], [1163.0, 910.0], [1167.0, 905.0], [1181.0, 1125.0], [1179.0, 1123.0], [1173.0, 1128.0], [1171.0, 1015.0], [1169.0, 1125.0], [1273.0, 1252.3333333333333], [1275.0, 1286.4705882352941], [1277.0, 1186.5], [1279.0, 1253.0], [1251.0, 1185.0], [1249.0, 1380.1666666666667], [1255.0, 1465.888888888889], [1253.0, 1378.142857142857], [1257.0, 1607.0], [1261.0, 1515.2857142857142], [1259.0, 1639.625], [1271.0, 1357.125], [1269.0, 1161.9], [1267.0, 1179.6666666666667], [1265.0, 1115.0], [1231.0, 948.0], [1229.0, 1400.4285714285716], [1227.0, 1434.3333333333333], [1221.0, 1377.3], [1225.0, 1338.3333333333333], [1223.0, 1395.0], [1219.0, 1424.0], [1217.0, 1195.0], [1247.0, 1441.4], [1243.0, 963.0], [1245.0, 1272.0], [1241.0, 1211.0], [1239.0, 1366.0], [1237.0, 1112.5], [1235.0, 1350.0], [1233.0, 1314.2], [1263.0, 1121.25], [1285.0, 1155.076923076923], [1281.0, 1268.5555555555557], [1309.0, 1447.2857142857142], [1307.0, 1331.75], [1305.0, 1232.3529411764703], [1311.0, 1258.6363636363637], [1303.0, 1261.5384615384614], [1301.0, 1376.8333333333335], [1299.0, 1199.25], [1283.0, 1190.3684210526312], [1287.0, 1182.4761904761904], [1289.0, 1253.9999999999998], [1291.0, 1308.5599999999997], [1293.0, 1487.0476190476193], [1297.0, 1403.9473684210525], [1295.0, 1394.0416666666667], [1329.0, 1598.5], [1331.0, 1605.0], [1333.0, 1832.5], [1335.0, 1789.4], [1337.0, 1653.7142857142856], [1343.0, 1741.8], [1341.0, 1798.625], [1339.0, 1535.5], [1313.0, 1344.25], [1315.0, 1341.4000000000003], [1323.0, 1287.0], [1321.0, 1239.2222222222222], [1319.0, 1262.3333333333333], [1317.0, 1179.0], [1325.0, 1411.5], [1347.0, 1955.8], [1349.0, 2017.0], [1361.0, 1404.6153846153845], [1363.0, 1482.0], [1367.0, 1507.3333333333333], [1365.0, 1504.739130434782], [1369.0, 1516.1724137931033], [1371.0, 1605.3076923076924], [1375.0, 1875.3500000000001], [1373.0, 1520.1538461538462], [1345.0, 1769.0], [1355.0, 1306.5], [1357.0, 1752.0], [1359.0, 1247.6666666666667], [1395.0, 1632.8333333333333], [1397.0, 1425.7499999999998], [1399.0, 1525.5238095238096], [1403.0, 1483.8461538461538], [1401.0, 1414.0], [1405.0, 1822.8888888888891], [1407.0, 2045.416666666667], [1393.0, 1437.5], [1377.0, 1409.0], [1379.0, 1566.4285714285713], [1381.0, 1363.2105263157896], [1383.0, 1337.1666666666667], [1385.0, 1500.7894736842104], [1387.0, 1350.0], [1389.0, 1459.9], [1391.0, 1682.6111111111113], [1411.0, 1276.0], [1439.0, 1509.3333333333335], [1435.0, 1499.6666666666665], [1433.0, 1570.4], [1437.0, 1480.75], [1431.0, 1855.0833333333333], [1429.0, 1440.1666666666665], [1427.0, 2341.285714285714], [1409.0, 2174.0], [1413.0, 1813.5], [1415.0, 1286.0], [1417.0, 2090.2], [1419.0, 1527.5], [1421.0, 1412.2], [1423.0, 1758.5714285714287], [1449.0, 1781.9333333333336], [1447.0, 1648.3333333333333], [1443.0, 2256.0], [1471.0, 1659.6249999999998], [1441.0, 1460.8750000000002], [1469.0, 1582.3157894736842], [1467.0, 1745.5384615384612], [1465.0, 1525.818181818182], [1463.0, 1495.230769230769], [1461.0, 1567.375], [1459.0, 1615.0], [1457.0, 1698.0], [1445.0, 2070.866666666667], [1451.0, 1662.923076923077], [1453.0, 1830.076923076923], [1455.0, 1457.0], [1425.0, 1471.0], [1475.0, 1760.227272727273], [1485.0, 2112.5499999999997], [1473.0, 1866.3928571428573], [1489.0, 1800.2800000000002], [1493.0, 1793.6086956521738], [1491.0, 1685.5666666666668], [1495.0, 1669.6206896551723], [1497.0, 1891.820512820513], [1499.0, 1629.6363636363635], [1503.0, 1601.7833333333333], [1501.0, 1631.6666666666665], [1477.0, 1568.5], [1479.0, 1675.4166666666665], [1483.0, 1700.25], [1481.0, 1530.5], [1487.0, 1765.3888888888891], [1521.0, 1822.444444444444], [1523.0, 1883.2083333333335], [1525.0, 2198.4920634920636], [1527.0, 2253.772727272727], [1531.0, 1851.9565217391303], [1529.0, 1711.6078431372553], [1533.0, 2001.4565217391307], [1535.0, 1991.1904761904766], [1505.0, 1560.15], [1507.0, 1634.1842105263158], [1511.0, 1730.8249999999996], [1513.0, 1776.2826086956525], [1515.0, 1759.4047619047617], [1517.0, 1878.2641509433963], [1519.0, 1836.2678571428573], [1509.0, 1829.8857142857141], [1539.0, 2050.9999999999995], [1567.0, 1762.4117647058824], [1565.0, 1886.9523809523807], [1563.0, 1796.5131578947367], [1561.0, 1757.4588235294116], [1559.0, 1771.25974025974], [1553.0, 1857.6111111111106], [1557.0, 1768.3529411764703], [1555.0, 1687.8666666666666], [1537.0, 1896.7906976744182], [1541.0, 2249.8333333333335], [1543.0, 1957.2363636363639], [1545.0, 1984.3333333333333], [1547.0, 1925.9729729729734], [1549.0, 1684.9729729729731], [1551.0, 1680.3611111111115], [1585.0, 1750.46511627907], [1587.0, 1818.8333333333335], [1589.0, 1741.02], [1591.0, 1672.1891891891892], [1593.0, 1752.5555555555554], [1597.0, 1923.492307692307], [1599.0, 1874.6341463414633], [1595.0, 1732.9999999999998], [1579.0, 1759.4146341463418], [1581.0, 1839.8974358974358], [1583.0, 1808.6000000000004], [1577.0, 1733.5098039215688], [1575.0, 1788.0147058823532], [1573.0, 1896.2833333333335], [1571.0, 1756.2987012987016], [1569.0, 1818.6321839080463], [1627.0, 1916.3333333333333], [1603.0, 1846.3076923076926], [1601.0, 1856.738095238095], [1621.0, 1912.5], [1623.0, 2002.8571428571427], [1625.0, 2088.0], [1629.0, 1895.0], [1631.0, 1720.3333333333333], [1619.0, 2007.2857142857144], [1605.0, 2069.833333333333], [1609.0, 1867.9189189189192], [1611.0, 1991.8214285714284], [1607.0, 2047.2608695652173], [1613.0, 1953.533333333333], [1615.0, 1664.2941176470588], [1633.0, 1957.5], [1617.0, 1992.6999999999998]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1386.6229999999916, 1637.0574999999976]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1633.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 52494.13333333333, "minX": 1.73403444E12, "maxY": 97967.26666666666, "series": [{"data": [[1.73403444E12, 97967.26666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73403444E12, 52494.13333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403444E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1637.0574999999976, "minX": 1.73403444E12, "maxY": 1637.0574999999976, "series": [{"data": [[1.73403444E12, 1637.0574999999976]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403444E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1636.9206000000029, "minX": 1.73403444E12, "maxY": 1636.9206000000029, "series": [{"data": [[1.73403444E12, 1636.9206000000029]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403444E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 42.543899999999915, "minX": 1.73403444E12, "maxY": 42.543899999999915, "series": [{"data": [[1.73403444E12, 42.543899999999915]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403444E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 486.0, "minX": 1.73403444E12, "maxY": 4787.0, "series": [{"data": [[1.73403444E12, 4787.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73403444E12, 2253.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73403444E12, 3700.5300000000007]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73403444E12, 2615.2999999999993]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73403444E12, 486.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73403444E12, 1579.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403444E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 750.0, "minX": 90.0, "maxY": 2366.0, "series": [{"data": [[1109.0, 1517.0], [1088.0, 823.0], [1167.0, 1574.5], [1343.0, 1246.0], [90.0, 1307.0], [735.0, 2366.0], [372.0, 1586.0], [774.0, 1841.0], [920.0, 1889.0], [929.0, 1678.0], [493.0, 2144.0], [980.0, 1446.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1109.0, 1335.0], [1088.0, 750.0], [1167.0, 1399.0], [1343.0, 1076.5], [90.0, 1044.0], [735.0, 1928.0], [372.0, 1427.0], [774.0, 1555.0], [920.0, 1739.5], [929.0, 1494.0], [980.0, 1257.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1343.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 749.5, "minX": 90.0, "maxY": 2366.0, "series": [{"data": [[1109.0, 1517.0], [1088.0, 823.0], [1167.0, 1574.5], [1343.0, 1246.0], [90.0, 1306.0], [735.0, 2366.0], [372.0, 1586.0], [774.0, 1841.0], [920.0, 1889.0], [929.0, 1678.0], [493.0, 2144.0], [980.0, 1446.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1109.0, 1334.0], [1088.0, 749.5], [1167.0, 1399.0], [1343.0, 1076.0], [90.0, 1044.0], [735.0, 1927.5], [372.0, 1427.0], [774.0, 1555.0], [920.0, 1739.5], [929.0, 1494.0], [980.0, 1257.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1343.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.73403444E12, "maxY": 166.66666666666666, "series": [{"data": [[1.73403444E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403444E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.73403444E12, "maxY": 162.43333333333334, "series": [{"data": [[1.73403444E12, 162.43333333333334]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.73403444E12, 4.116666666666666]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.73403444E12, 0.11666666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73403444E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.233333333333333, "minX": 1.73403444E12, "maxY": 162.43333333333334, "series": [{"data": [[1.73403444E12, 4.233333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.73403444E12, 162.43333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403444E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.233333333333333, "minX": 1.73403444E12, "maxY": 162.43333333333334, "series": [{"data": [[1.73403444E12, 162.43333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73403444E12, 4.233333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73403444E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

